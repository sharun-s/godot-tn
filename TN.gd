extends Node2D

# generated using inkscape --query-all tndistricts.svg
var d={
	Ariyalur=[953.4, 772.77154, 189, 181],
Chengalpattu=[1187.6992, 250.59959, 206, 235],
Chennai=[1346.5329, 127.77688, 89, 143],
Coimbatore=[176.59072, 778.52605, 179, 403],
Cuddalore=[930, 608, 323, 254],
Dharmapuri=[523.4, 391.98666, 357, 255],
Dindigul=[378.9, 976.16227, 367, 278],
Erode=[239.74398, 586.9, 371, 319],
Kallakurichi=[845.71773, 541.92189, 287, 200],
Kanchipuram=[1159.6992, 209.4353, 213, 187],
Kanyakumari=[318.8, 1749.4, 170, 173],
Karur=[548.7041, 882.19391, 273, 191],
Krishnagiri=[447.84352, 264.0834, 412, 254],
Madurai=[448.7, 1155.6, 340, 258],
Mayiladithurai=[1147.2, 766.3, 120, 159],
Nagapattinam=[1190.8322, 941.2, 82, 222],
Namakkal=[525.9, 710.24797, 271, 200],
Nilgiris=[35.179205, 666.66965, 261, 183],
Perumbalur=[849.59825, 736.1, 180, 165],
Pudukotai=[784, 1010.1992, 282, 302],
Ramanathapuram=[711.41374, 1277.6, 453, 290],
Ranipet=[1035.4198, 153.59961, 197, 197],
Salem=[510.87492, 581.5356, 410, 225],
Sivagangai=[670.3, 1117.9, 305, 301],
Tenkasi=[342.68731, 1464.2479, 241, 215],
Thanjavur=[892.9, 849.9625, 267, 359],
Theni=[349.98068, 1189.1748, 189, 236],
Thoothukudi=[524.26323, 1477.0951, 244, 357],
Tiruchirapalli=[687.5, 771.2813, 286, 386],
Tirunelveli=[342.5811, 1598.9395, 276, 303],
Tirupathur=[769.5, 237.28516, 164, 241],
Tiruppur=[295.39381, 797.44396, 301, 383],
Tiruvallur=[1066.8503, 31.7, 362, 211],
Tiruvannamalai=[844.8954, 260.51825, 384, 316],
Tiruvarur=[1067.9132, 907.08195, 162, 253],
Vellore=[833.79688, 171.82608, 234, 196],
Vilippuram=[1042.3355, 412.88469, 269, 226],
Virudhunagar=[406.3, 1340.1006, 373, 196]
}

var district_polys={
Ariyalur=[125, 1, 120, 6, 120, 9, 75, 12, 74, 12, 71, 19, 71, 23, 63, 29, 62, 29, 64, 36, 64, 40, 57, 42, 56, 42, 56, 48, 60, 50, 60, 53, 49, 68, 49, 70, 41, 71, 39, 71, 41, 82, 41, 88, 38, 92, 38, 97, 41, 101, 41, 105, 26, 114, 24, 114, 18, 121, 17, 121, 20, 128, 20, 137, 9, 149, 9, 156, 3, 158, 0, 158, 16, 173, 17, 173, 15, 181, 35, 181, 38, 179, 41, 179, 53, 166, 53, 165, 81, 161, 88, 161, 104, 152, 106, 152, 139, 123, 139, 122, 152, 117, 154, 117, 160, 111, 161, 111, 169, 94, 169, 92, 180, 80, 181, 80, 186, 68, 187, 68, 189, 55, 189, 42, 179, 35, 177, 35, 170, 24, 170, 23, 159, 22, 157, 22, 148, 3, 148, 2, 125, 0],
Chengalpattu=[178, 1, 169, 1, 164, 6, 164, 7, 149, 13, 147, 13, 134, 30, 134, 31, 114, 43, 114, 44, 98, 41, 90, 41, 79, 47, 76, 47, 93, 57, 95, 57, 103, 69, 103, 70, 92, 71, 91, 71, 87, 82, 86, 82, 88, 89, 88, 91, 74, 96, 74, 97, 59, 99, 51, 99, 46, 102, 44, 102, 42, 106, 42, 110, 52, 129, 52, 130, 32, 141, 30, 141, 29, 143, 29, 148, 34, 163, 34, 168, 19, 172, 17, 172, 2, 197, 0, 197, 7, 204, 7, 205, 22, 202, 22, 201, 34, 204, 39, 204, 47, 200, 54, 200, 68, 214, 69, 214, 76, 227, 76, 229, 82, 234, 82, 235, 91, 235, 96, 231, 96, 230, 102, 230, 114, 230, 133, 213, 134, 213, 143, 197, 143, 195, 159, 178, 160, 178, 169, 164, 170, 164, 171, 161, 171, 156, 164, 148, 164, 147, 167, 146, 172, 146, 176, 141, 177, 141, 192, 86, 192, 82, 204, 55, 205, 55, 206, 27, 206, 18, 196, 19, 194, 19, 192, 15, 191, 15, 191, 4, 191, 1, 178, 0],
Chennai=[70, 1, 67, 16, 67, 17, 58, 13, 53, 13, 53, 20, 46, 22, 40, 22, 39, 23, 39, 27, 33, 29, 33, 30, 28, 30, 25, 24, 19, 24, 17, 27, 16, 27, 17, 34, 17, 35, 12, 38, 4, 38, 1, 44, 0, 44, 0, 52, 8, 57, 9, 57, 4, 67, 4, 74, 7, 77, 10, 77, 14, 68, 15, 68, 15, 78, 11, 82, 10, 82, 15, 85, 15, 94, 6, 108, 6, 111, 10, 114, 10, 115, 22, 112, 25, 112, 26, 115, 26, 123, 31, 125, 32, 125, 32, 139, 36, 142, 36, 143, 61, 141, 64, 141, 88, 17, 89, 17, 89, 10, 86, 8, 86, 7, 70, 0],
Coimbatore=[137, 1, 127, 7, 127, 9, 109, 3, 109, 1, 93, 7, 93, 8, 71, 9, 68, 9, 63, 30, 63, 31, 48, 35, 45, 35, 20, 52, 19, 52, 21, 58, 21, 64, 14, 71, 13, 71, 13, 76, 13, 79, 26, 92, 27, 92, 31, 112, 31, 114, 35, 117, 35, 118, 43, 118, 43, 120, 36, 123, 36, 124, 16, 126, 14, 126, 6, 136, 5, 136, 1, 148, 0, 148, 0, 159, 5, 164, 5, 165, 42, 177, 46, 177, 54, 182, 56, 182, 67, 198, 67, 202, 78, 203, 80, 203, 78, 212, 78, 223, 72, 240, 71, 240, 73, 250, 73, 253, 67, 260, 67, 261, 60, 260, 53, 260, 51, 264, 50, 264, 51, 267, 51, 270, 61, 279, 62, 279, 54, 329, 53, 329, 59, 351, 60, 351, 58, 371, 58, 373, 69, 377, 71, 377, 77, 393, 77, 395, 94, 403, 110, 403, 124, 393, 125, 393, 129, 383, 129, 380, 134, 375, 134, 374, 146, 370, 149, 370, 149, 345, 136, 330, 135, 330, 135, 323, 144, 303, 145, 303, 144, 287, 144, 283, 150, 276, 171, 276, 179, 267, 179, 257, 164, 245, 163, 245, 164, 226, 164, 220, 174, 205, 175, 205, 173, 195, 173, 193, 157, 175, 157, 174, 135, 176, 134, 176, 140, 163, 140, 157, 130, 145, 130, 138, 134, 136, 135, 136, 137, 117, 137, 113, 148, 101, 148, 97, 130, 82, 128, 82, 119, 71, 119, 66, 126, 40, 126, 38, 138, 31, 141, 31, 155, 19, 165, 19, 151, 2, 151, 1, 137, 0],
Cuddalore=[275, 4, 279, 13, 279, 16, 261, 31, 259, 31, 245, 19, 245, 18, 233, 14, 229, 14, 206, 2, 199, 2, 203, 20, 203, 23, 201, 26, 194, 26, 189, 34, 188, 34, 188, 40, 196, 46, 197, 46, 190, 51, 189, 51, 193, 70, 194, 70, 192, 80, 192, 81, 179, 75, 173, 75, 147, 89, 147, 90, 135, 88, 135, 87, 124, 89, 121, 89, 102, 102, 102, 103, 85, 103, 77, 99, 75, 99, 70, 93, 70, 90, 66, 91, 64, 91, 63, 93, 63, 97, 66, 98, 66, 102, 62, 103, 62, 104, 57, 102, 55, 102, 48, 95, 45, 95, 39, 105, 39, 106, 19, 113, 17, 113, 13, 126, 13, 128, 2, 133, 0, 133, 2, 136, 2, 138, 34, 167, 34, 168, 75, 170, 86, 170, 105, 178, 105, 179, 120, 175, 144, 175, 145, 173, 145, 169, 150, 166, 150, 165, 170, 168, 172, 168, 176, 181, 176, 183, 183, 189, 194, 189, 197, 196, 197, 198, 211, 207, 212, 207, 210, 227, 210, 233, 197, 254, 202, 254, 209, 246, 209, 244, 216, 243, 218, 243, 224, 238, 224, 237, 242, 229, 244, 229, 255, 219, 264, 219, 266, 212, 266, 209, 263, 203, 263, 200, 309, 178, 311, 178, 317, 172, 318, 172, 322, 161, 323, 161, 322, 157, 322, 155, 319, 153, 319, 152, 315, 153, 309, 153, 311, 146, 311, 139, 302, 110, 301, 110, 302, 97, 302, 91, 307, 75, 308, 75, 308, 43, 308, 39, 316, 34, 316, 33, 300, 35, 289, 35, 289, 32, 288, 32, 292, 22, 293, 22, 291, 18, 291, 14, 298, 14, 317, 22, 317, 25, 321, 18, 321, 17, 315, 13, 315, 12, 308, 13, 305, 13, 302, 10, 302, 9, 292, 7, 292, 6, 287, 8, 286, 8, 283, 2, 283, 1, 275, 0],
Dharmapuri=[74, 2, 80, 8, 81, 8, 84, 19, 84, 22, 96, 31, 96, 39, 86, 60, 86, 62, 83, 64, 74, 64, 65, 61, 64, 61, 64, 82, 61, 86, 61, 87, 46, 96, 45, 96, 39, 120, 39, 122, 38, 123, 31, 123, 23, 119, 23, 118, 17, 118, 15, 118, 25, 140, 25, 146, 11, 163, 10, 163, 4, 177, 3, 177, 0, 186, 0, 192, 5, 195, 5, 196, 19, 198, 22, 198, 30, 205, 30, 206, 63, 207, 71, 207, 88, 214, 94, 214, 104, 208, 104, 207, 107, 206, 116, 206, 134, 199, 134, 198, 166, 190, 191, 190, 190, 196, 190, 199, 194, 200, 197, 200, 204, 209, 204, 210, 215, 204, 215, 203, 219, 205, 220, 205, 223, 212, 223, 213, 228, 210, 234, 210, 234, 217, 227, 233, 227, 237, 217, 249, 216, 249, 216, 254, 216, 255, 221, 254, 223, 254, 230, 246, 231, 246, 245, 225, 245, 224, 249, 225, 251, 225, 263, 238, 263, 239, 280, 245, 292, 245, 300, 241, 302, 241, 322, 225, 324, 225, 325, 219, 325, 218, 352, 209, 353, 209, 348, 192, 348, 184, 343, 181, 343, 172, 356, 138, 357, 138, 355, 129, 355, 128, 341, 133, 341, 134, 333, 130, 322, 130, 326, 118, 327, 118, 324, 114, 324, 112, 314, 114, 307, 114, 305, 110, 305, 106, 295, 110, 295, 111, 289, 110, 287, 110, 279, 123, 279, 125, 275, 124, 270, 124, 267, 116, 267, 114, 259, 106, 259, 105, 256, 104, 251, 104, 246, 109, 246, 110, 241, 109, 238, 109, 237, 108, 237, 107, 242, 104, 242, 102, 232, 99, 230, 99, 224, 86, 224, 85, 201, 84, 199, 84, 185, 63, 185, 57, 170, 57, 168, 57, 158, 46, 157, 46, 150, 30, 150, 28, 139, 21, 135, 21, 132, 15, 132, 14, 130, 13, 124, 13, 122, 16, 120, 16, 106, 3, 106, 2, 97, 6, 92, 6, 90, 3, 90, 0, 74, 0],
Dindigul=[302, 1, 284, 21, 284, 22, 268, 17, 257, 17, 243, 25, 243, 26, 235, 27, 233, 27, 234, 32, 234, 33, 250, 32, 257, 32, 256, 48, 256, 51, 252, 54, 252, 55, 247, 55, 247, 64, 223, 62, 214, 62, 205, 67, 202, 67, 194, 55, 194, 53, 185, 49, 185, 48, 178, 51, 176, 51, 161, 63, 157, 63, 158, 54, 158, 41, 153, 35, 148, 35, 135, 52, 135, 53, 125, 53, 111, 53, 93, 66, 93, 67, 84, 67, 76, 63, 73, 63, 50, 76, 48, 76, 45, 88, 45, 90, 41, 93, 39, 93, 36, 99, 35, 99, 37, 103, 37, 104, 48, 108, 49, 108, 40, 116, 39, 116, 41, 127, 41, 129, 20, 128, 19, 128, 24, 146, 25, 146, 29, 188, 29, 193, 11, 204, 10, 204, 7, 222, 7, 226, 1, 237, 0, 237, 6, 240, 26, 240, 41, 234, 50, 234, 62, 239, 64, 239, 84, 231, 87, 231, 118, 214, 118, 213, 141, 218, 146, 218, 149, 220, 152, 220, 159, 231, 160, 231, 144, 239, 143, 239, 143, 243, 149, 247, 150, 247, 152, 253, 153, 253, 155, 266, 155, 271, 159, 278, 162, 278, 171, 271, 171, 270, 207, 259, 229, 259, 231, 257, 233, 257, 236, 247, 236, 245, 244, 241, 246, 241, 254, 230, 254, 229, 287, 219, 299, 219, 305, 226, 306, 226, 313, 247, 313, 250, 319, 257, 319, 258, 321, 259, 333, 259, 337, 255, 339, 255, 348, 236, 349, 236, 349, 227, 346, 225, 346, 221, 359, 210, 360, 210, 367, 183, 367, 180, 363, 180, 362, 165, 362, 163, 349, 153, 348, 153, 356, 138, 356, 127, 324, 116, 322, 116, 316, 107, 315, 107, 316, 101, 316, 98, 321, 93, 321, 91, 308, 88, 305, 88, 299, 83, 298, 83, 306, 64, 307, 64, 304, 34, 304, 32, 309, 25, 310, 25, 310, 11, 315, 5, 316, 5, 316, 2, 312, 1, 312, 0, 302, 0],
Erode=[271, 1, 245, 2, 233, 2, 223, 6, 220, 6, 219, 9, 219, 14, 211, 19, 210, 19, 206, 41, 206, 45, 200, 58, 200, 59, 187, 56, 181, 56, 173, 61, 168, 61, 149, 48, 142, 48, 138, 51, 138, 52, 122, 53, 114, 53, 100, 57, 97, 57, 93, 60, 92, 60, 93, 71, 89, 71, 68, 50, 68, 48, 61, 45, 61, 44, 53, 44, 42, 51, 42, 52, 24, 53, 21, 53, 16, 58, 15, 58, 6, 78, 5, 78, 1, 99, 0, 99, 2, 122, 2, 123, 38, 130, 41, 130, 51, 138, 52, 138, 55, 145, 56, 145, 51, 161, 50, 161, 54, 173, 54, 176, 48, 179, 46, 179, 45, 184, 44, 184, 46, 196, 46, 197, 62, 201, 65, 201, 69, 196, 69, 195, 76, 192, 85, 192, 110, 219, 110, 220, 113, 218, 113, 215, 123, 212, 123, 211, 129, 211, 138, 219, 138, 220, 148, 216, 151, 216, 152, 228, 152, 231, 162, 239, 162, 240, 167, 240, 170, 236, 171, 236, 170, 225, 170, 222, 176, 222, 178, 225, 179, 225, 185, 235, 186, 235, 187, 242, 187, 246, 184, 250, 184, 253, 191, 264, 192, 264, 192, 272, 184, 285, 184, 289, 194, 286, 195, 286, 199, 289, 199, 290, 223, 293, 234, 293, 256, 288, 273, 288, 317, 307, 317, 308, 331, 308, 334, 308, 349, 319, 355, 319, 371, 306, 371, 304, 357, 298, 356, 298, 353, 287, 352, 287, 353, 278, 353, 272, 349, 266, 348, 266, 350, 253, 350, 246, 344, 238, 344, 237, 324, 223, 322, 223, 288, 184, 287, 184, 291, 176, 292, 176, 291, 166, 291, 163, 296, 157, 297, 157, 301, 141, 301, 138, 306, 133, 307, 133, 305, 128, 305, 119, 308, 112, 308, 106, 296, 110, 296, 111, 288, 107, 287, 107, 287, 94, 287, 81, 293, 58, 293, 53, 288, 48, 288, 47, 273, 45, 272, 45, 281, 20, 281, 5, 277, 1, 277, 0, 271, 0],
Kallakurichi=[124, 1, 110, 5, 108, 5, 94, 18, 94, 19, 88, 20, 78, 20, 45, 29, 38, 29, 29, 34, 27, 34, 25, 36, 25, 43, 30, 55, 30, 59, 1, 70, 0, 70, 0, 75, 11, 75, 19, 79, 20, 79, 16, 93, 16, 95, 13, 95, 9, 102, 9, 104, 3, 107, 2, 107, 1, 112, 0, 112, 2, 126, 2, 131, 8, 146, 8, 148, 9, 149, 13, 149, 16, 137, 16, 136, 51, 134, 53, 134, 56, 137, 56, 144, 51, 155, 51, 162, 59, 169, 60, 169, 64, 182, 64, 184, 83, 199, 83, 200, 93, 197, 95, 197, 99, 189, 99, 183, 103, 180, 103, 179, 123, 172, 125, 172, 130, 163, 130, 162, 143, 171, 147, 171, 150, 168, 151, 168, 148, 162, 147, 162, 150, 157, 154, 157, 154, 161, 159, 165, 159, 166, 175, 171, 181, 171, 208, 156, 208, 155, 212, 154, 219, 154, 224, 157, 231, 157, 258, 143, 258, 142, 276, 147, 278, 147, 279, 144, 279, 138, 274, 122, 274, 118, 282, 114, 282, 113, 272, 105, 272, 102, 278, 95, 278, 93, 286, 91, 287, 91, 284, 76, 284, 69, 256, 59, 253, 59, 239, 49, 238, 49, 237, 46, 237, 43, 243, 45, 248, 45, 241, 29, 240, 29, 240, 15, 240, 14, 233, 15, 226, 15, 220, 11, 218, 11, 211, 0, 209, 0, 186, 11, 186, 12, 176, 11, 172, 11, 161, 19, 157, 19, 153, 9, 153, 8, 144, 10, 137, 10, 131, 2, 131, 0, 124, 0],
Kanchipuram=[110, 2, 112, 4, 112, 7, 124, 13, 124, 16, 112, 16, 109, 16, 112, 22, 112, 25, 104, 31, 104, 32, 97, 32, 87, 24, 86, 24, 83, 15, 83, 11, 77, 3, 71, 3, 38, 23, 36, 23, 32, 28, 32, 36, 6, 47, 4, 47, 2, 52, 1, 52, 1, 64, 0, 64, 2, 67, 2, 68, 10, 71, 10, 72, 26, 76, 28, 76, 33, 88, 33, 89, 35, 90, 42, 90, 46, 87, 47, 87, 62, 97, 64, 97, 59, 103, 58, 103, 58, 115, 58, 117, 36, 125, 28, 125, 23, 136, 23, 138, 28, 143, 29, 143, 32, 155, 52, 155, 57, 169, 57, 175, 68, 177, 68, 178, 76, 175, 78, 175, 81, 172, 81, 171, 73, 155, 72, 155, 72, 147, 72, 145, 92, 140, 101, 140, 113, 134, 116, 134, 115, 129, 115, 122, 119, 116, 119, 114, 131, 112, 132, 112, 125, 101, 125, 99, 106, 90, 106, 89, 119, 84, 119, 83, 139, 86, 143, 86, 160, 73, 162, 73, 174, 57, 174, 56, 190, 49, 192, 49, 197, 44, 197, 43, 206, 42, 213, 42, 213, 31, 213, 29, 201, 31, 201, 32, 195, 30, 194, 30, 201, 13, 202, 13, 201, 3, 201, 2, 167, 4, 155, 4, 144, 1, 144, 0, 110, 0],
Kanyakumari=[61, 3, 62, 3, 62, 15, 57, 22, 57, 23, 43, 21, 43, 20, 37, 23, 36, 23, 36, 30, 43, 37, 43, 39, 30, 57, 30, 59, 20, 66, 19, 66, 24, 76, 24, 82, 12, 86, 9, 86, 7, 88, 7, 92, 0, 94, 0, 97, 36, 126, 36, 127, 62, 143, 64, 143, 73, 153, 73, 157, 83, 157, 90, 157, 125, 170, 125, 171, 150, 173, 160, 173, 162, 170, 163, 170, 163, 160, 168, 153, 168, 152, 156, 146, 155, 146, 157, 130, 157, 129, 154, 123, 154, 121, 168, 118, 170, 118, 157, 96, 156, 96, 151, 71, 151, 69, 133, 63, 132, 63, 130, 58, 130, 47, 124, 39, 123, 39, 121, 30, 121, 28, 94, 17, 91, 17, 61, 0],
Karur=[79, 1, 68, 6, 66, 6, 45, 22, 45, 23, 40, 23, 22, 12, 22, 11, 15, 11, 9, 11, 6, 15, 5, 15, 9, 22, 10, 22, 10, 28, 3, 38, 2, 38, 7, 59, 7, 63, 0, 72, 0, 78, 11, 84, 13, 84, 22, 93, 22, 94, 30, 90, 32, 90, 35, 95, 35, 102, 41, 104, 43, 104, 46, 108, 47, 108, 45, 113, 38, 113, 26, 104, 23, 104, 18, 107, 16, 107, 13, 112, 12, 112, 13, 115, 13, 117, 24, 125, 25, 125, 24, 128, 24, 130, 15, 139, 15, 144, 18, 146, 22, 146, 31, 160, 31, 161, 43, 158, 43, 157, 67, 159, 78, 159, 78, 150, 82, 149, 84, 149, 86, 145, 87, 145, 88, 129, 88, 125, 63, 125, 63, 123, 69, 120, 75, 120, 86, 113, 86, 112, 99, 112, 110, 117, 114, 117, 128, 100, 128, 98, 135, 94, 140, 94, 146, 97, 146, 98, 141, 103, 140, 103, 140, 114, 140, 116, 135, 124, 134, 124, 136, 154, 136, 159, 127, 175, 127, 177, 136, 182, 136, 183, 146, 184, 149, 184, 153, 190, 153, 191, 162, 190, 166, 190, 170, 185, 171, 185, 175, 152, 175, 146, 179, 138, 179, 137, 191, 141, 193, 141, 204, 130, 205, 130, 215, 139, 216, 139, 221, 150, 221, 151, 252, 140, 255, 140, 267, 129, 268, 129, 271, 122, 272, 122, 272, 116, 267, 109, 266, 109, 266, 105, 272, 100, 273, 100, 272, 92, 272, 90, 261, 79, 261, 78, 255, 76, 251, 76, 245, 71, 243, 71, 236, 56, 236, 55, 220, 51, 220, 50, 202, 49, 202, 48, 175, 48, 162, 53, 162, 54, 155, 54, 152, 54, 145, 45, 144, 45, 136, 21, 136, 19, 127, 11, 127, 10, 114, 5, 114, 4, 93, 4, 87, 1, 87, 0, 79, 0],
Krishnagiri=[146, 1, 135, 4, 129, 4, 118, 12, 115, 12, 117, 20, 117, 28, 108, 47, 107, 47, 105, 56, 105, 62, 101, 68, 101, 69, 98, 70, 87, 70, 83, 75, 83, 76, 66, 69, 61, 69, 47, 77, 46, 77, 40, 109, 40, 116, 50, 136, 50, 138, 58, 145, 59, 145, 54, 172, 54, 176, 35, 194, 34, 194, 26, 206, 26, 207, 12, 209, 9, 209, 2, 216, 1, 216, 0, 219, 0, 223, 4, 232, 4, 234, 8, 236, 17, 236, 27, 233, 27, 232, 38, 232, 48, 232, 76, 239, 80, 239, 90, 246, 90, 247, 97, 247, 106, 252, 113, 252, 121, 226, 121, 224, 133, 217, 135, 217, 138, 212, 139, 212, 139, 195, 139, 190, 150, 192, 150, 193, 159, 191, 161, 191, 171, 166, 172, 166, 172, 159, 161, 150, 160, 150, 158, 141, 158, 138, 150, 130, 150, 128, 164, 128, 167, 134, 167, 135, 177, 131, 181, 131, 188, 140, 188, 141, 196, 144, 196, 145, 200, 142, 200, 141, 204, 142, 206, 142, 210, 147, 210, 150, 216, 150, 224, 157, 225, 157, 230, 170, 230, 172, 242, 184, 242, 185, 250, 187, 250, 188, 257, 185, 259, 185, 260, 190, 260, 193, 273, 211, 273, 212, 277, 214, 277, 215, 282, 212, 282, 211, 298, 213, 299, 213, 303, 224, 303, 226, 313, 230, 316, 230, 313, 234, 312, 234, 313, 237, 313, 238, 318, 239, 321, 239, 326, 233, 332, 233, 340, 241, 341, 241, 345, 252, 345, 253, 351, 254, 355, 254, 360, 243, 360, 241, 364, 239, 364, 238, 367, 239, 372, 239, 377, 235, 380, 235, 381, 240, 381, 242, 392, 241, 399, 241, 399, 238, 407, 233, 409, 233, 411, 226, 412, 226, 409, 213, 409, 212, 389, 207, 388, 207, 390, 204, 390, 186, 393, 185, 393, 180, 386, 173, 386, 172, 361, 162, 361, 161, 353, 161, 345, 166, 345, 167, 342, 165, 341, 165, 340, 163, 340, 158, 344, 153, 344, 150, 329, 138, 328, 138, 327, 135, 327, 107, 322, 88, 322, 86, 309, 83, 306, 83, 270, 65, 266, 65, 268, 57, 268, 53, 263, 43, 263, 42, 232, 32, 230, 32, 212, 16, 212, 15, 202, 10, 202, 9, 193, 12, 192, 12, 188, 29, 184, 29, 169, 15, 169, 14, 165, 14, 162, 19, 162, 20, 157, 18, 155, 18, 154, 16, 154, 12, 158, 7, 158, 3, 146, 0],
Madurai=[304, 1, 297, 2, 296, 2, 292, 21, 292, 25, 276, 42, 275, 42, 278, 50, 279, 50, 276, 59, 276, 62, 270, 71, 270, 73, 262, 78, 262, 79, 252, 79, 247, 74, 246, 74, 237, 50, 237, 47, 229, 39, 215, 39, 187, 48, 185, 48, 175, 60, 175, 61, 166, 65, 165, 65, 161, 77, 161, 78, 135, 80, 131, 80, 104, 90, 101, 90, 90, 97, 88, 97, 84, 104, 83, 104, 80, 121, 80, 124, 75, 128, 74, 128, 73, 131, 73, 136, 66, 143, 65, 143, 51, 181, 51, 183, 35, 197, 34, 197, 24, 219, 24, 221, 1, 256, 0, 256, 0, 258, 4, 258, 11, 254, 13, 254, 24, 233, 24, 232, 46, 226, 48, 226, 53, 212, 53, 211, 60, 211, 69, 217, 73, 217, 87, 210, 90, 210, 100, 216, 102, 216, 104, 222, 104, 226, 111, 229, 111, 230, 114, 229, 130, 229, 147, 233, 147, 234, 157, 229, 157, 228, 170, 231, 178, 231, 195, 220, 195, 219, 206, 217, 207, 217, 206, 204, 206, 198, 209, 195, 209, 193, 219, 188, 224, 188, 222, 185, 222, 184, 229, 184, 232, 176, 232, 175, 243, 179, 245, 179, 249, 172, 249, 166, 245, 164, 245, 163, 235, 165, 227, 165, 225, 163, 225, 161, 229, 158, 229, 157, 252, 150, 252, 149, 271, 149, 282, 144, 285, 144, 301, 127, 301, 126, 332, 116, 334, 116, 339, 110, 339, 103, 331, 90, 331, 85, 340, 74, 340, 66, 335, 61, 335, 60, 320, 53, 319, 53, 317, 49, 317, 39, 321, 28, 321, 18, 310, 2, 310, 0, 304, 0],
Mayiladithurai=[105, 3, 101, 10, 101, 12, 90, 20, 90, 21, 48, 40, 46, 40, 47, 54, 47, 60, 39, 59, 36, 59, 28, 68, 28, 69, 10, 77, 8, 77, 1, 83, 0, 83, 9, 92, 11, 92, 7, 104, 6, 104, 10, 124, 10, 126, 9, 127, 6, 127, 5, 131, 4, 131, 6, 139, 6, 145, 2, 151, 1, 151, 1, 157, 1, 158, 21, 158, 28, 158, 52, 143, 52, 142, 77, 146, 77, 147, 83, 145, 87, 145, 96, 150, 96, 151, 100, 151, 102, 145, 107, 145, 116, 152, 118, 152, 120, 126, 120, 84, 114, 48, 113, 48, 114, 33, 114, 27, 108, 20, 107, 20, 112, 17, 112, 11, 105, 0],
Nagapattinam=[26, 1, 17, 4, 15, 4, 6, 20, 5, 20, 8, 27, 9, 27, 6, 39, 6, 40, 23, 35, 23, 34, 31, 36, 32, 36, 20, 66, 20, 68, 13, 72, 12, 72, 14, 81, 14, 84, 5, 93, 5, 98, 10, 103, 11, 103, 13, 116, 14, 116, 11, 124, 11, 129, 20, 131, 26, 131, 29, 134, 29, 137, 21, 159, 21, 162, 16, 163, 9, 163, 3, 167, 2, 167, 1, 188, 1, 192, 16, 206, 16, 207, 32, 208, 39, 208, 56, 221, 56, 222, 71, 221, 75, 221, 81, 214, 82, 214, 79, 140, 79, 109, 74, 49, 74, 31, 68, 28, 67, 28, 61, 17, 60, 17, 62, 13, 62, 11, 60, 9, 52, 9, 51, 3, 51, 2, 47, 5, 44, 5, 26, 0],
Namakkal=[203, 1, 194, 8, 194, 9, 188, 8, 177, 8, 167, 13, 167, 14, 147, 16, 138, 16, 128, 23, 128, 24, 104, 24, 101, 24, 95, 38, 95, 41, 86, 46, 81, 46, 73, 58, 73, 59, 58, 54, 55, 54, 48, 42, 48, 41, 45, 42, 44, 42, 41, 49, 37, 49, 34, 44, 34, 42, 29, 40, 29, 39, 27, 40, 27, 48, 19, 48, 5, 42, 3, 42, 5, 49, 5, 52, 1, 59, 0, 59, 28, 91, 28, 93, 60, 119, 61, 119, 63, 124, 63, 128, 60, 137, 60, 141, 65, 149, 66, 149, 65, 154, 65, 165, 70, 175, 70, 177, 84, 181, 84, 182, 105, 173, 105, 172, 117, 176, 117, 177, 133, 177, 138, 177, 152, 186, 154, 186, 161, 200, 163, 200, 168, 195, 169, 195, 166, 184, 166, 182, 178, 183, 183, 183, 187, 170, 191, 170, 199, 177, 199, 178, 211, 183, 213, 183, 220, 192, 223, 192, 222, 176, 222, 166, 239, 145, 240, 145, 262, 98, 263, 98, 264, 95, 264, 88, 259, 84, 259, 82, 264, 78, 265, 78, 271, 65, 271, 62, 262, 62, 260, 62, 253, 47, 252, 47, 251, 43, 251, 37, 265, 21, 266, 21, 265, 18, 265, 15, 256, 4, 256, 2, 253, 0, 246, 0, 233, 4, 230, 4, 218, 16, 217, 16, 212, 6, 212, 4, 208, 1, 208, 0, 203, 0],
Nilgiris=[87, 1, 69, 13, 67, 13, 65, 26, 65, 28, 52, 29, 50, 29, 43, 43, 43, 44, 26, 47, 26, 49, 21, 49, 17, 45, 17, 43, 1, 47, 0, 47, 2, 57, 3, 57, 0, 65, 0, 81, 3, 83, 3, 84, 46, 99, 49, 99, 80, 115, 82, 115, 101, 130, 102, 130, 97, 147, 97, 149, 91, 154, 91, 155, 70, 164, 68, 164, 66, 169, 66, 172, 73, 182, 73, 183, 77, 183, 81, 176, 81, 175, 96, 181, 96, 182, 107, 180, 107, 179, 131, 180, 136, 180, 184, 150, 184, 149, 204, 143, 206, 143, 208, 139, 208, 124, 211, 122, 211, 121, 232, 120, 237, 120, 249, 113, 250, 113, 250, 101, 258, 96, 260, 96, 257, 87, 256, 87, 256, 78, 260, 73, 261, 73, 258, 61, 258, 59, 245, 50, 245, 49, 226, 46, 217, 46, 162, 33, 162, 32, 145, 32, 134, 37, 134, 38, 122, 35, 119, 35, 111, 28, 110, 28, 99, 7, 99, 5, 94, 1, 94, 0, 87, 0],
Perumbalur=[67, 1, 56, 6, 54, 6, 50, 11, 49, 11, 58, 28, 59, 28, 58, 32, 58, 34, 51, 38, 51, 39, 36, 26, 36, 25, 27, 22, 27, 21, 19, 22, 15, 22, 6, 28, 4, 28, 1, 33, 0, 33, 2, 44, 2, 48, 6, 48, 14, 48, 2, 61, 2, 66, 5, 68, 26, 68, 32, 73, 33, 73, 33, 80, 22, 102, 22, 105, 12, 119, 11, 119, 11, 130, 16, 143, 16, 146, 25, 159, 25, 161, 30, 164, 30, 165, 32, 152, 32, 146, 44, 141, 44, 140, 53, 140, 57, 149, 57, 153, 63, 154, 63, 155, 67, 154, 70, 154, 76, 148, 76, 147, 81, 148, 106, 148, 111, 150, 114, 150, 121, 158, 122, 158, 128, 152, 128, 151, 140, 146, 142, 146, 144, 143, 145, 143, 143, 132, 142, 132, 145, 122, 146, 122, 143, 112, 143, 109, 152, 108, 153, 108, 155, 102, 155, 99, 162, 92, 163, 92, 164, 90, 164, 86, 160, 84, 160, 80, 168, 76, 169, 76, 166, 69, 166, 67, 174, 61, 175, 61, 179, 48, 180, 48, 174, 44, 174, 43, 167, 42, 167, 41, 115, 38, 112, 38, 77, 2, 77, 1, 67, 0],
Pudukotai=[83, 1, 75, 17, 75, 18, 71, 17, 70, 17, 66, 4, 63, 4, 47, 20, 47, 21, 44, 22, 39, 22, 30, 18, 28, 18, 20, 29, 20, 30, 9, 36, 7, 36, 1, 44, 0, 44, 5, 55, 5, 61, 8, 64, 10, 64, 17, 77, 17, 79, 19, 80, 23, 80, 33, 67, 38, 67, 44, 85, 45, 85, 44, 90, 44, 93, 28, 101, 26, 101, 14, 121, 13, 121, 14, 126, 14, 128, 19, 132, 21, 132, 23, 137, 23, 146, 10, 166, 9, 166, 8, 171, 8, 173, 12, 180, 12, 182, 17, 182, 19, 182, 47, 151, 50, 151, 67, 160, 68, 160, 69, 162, 69, 171, 73, 174, 74, 174, 76, 190, 76, 193, 80, 195, 80, 196, 88, 192, 88, 191, 106, 192, 108, 192, 115, 178, 118, 178, 130, 195, 130, 196, 145, 200, 145, 201, 152, 199, 155, 199, 167, 207, 167, 208, 179, 210, 181, 210, 183, 212, 183, 216, 175, 222, 173, 222, 165, 234, 165, 241, 170, 245, 170, 246, 189, 253, 190, 253, 190, 267, 190, 269, 200, 289, 200, 291, 225, 301, 225, 302, 228, 302, 235, 284, 235, 282, 259, 255, 259, 253, 281, 236, 282, 236, 282, 230, 272, 221, 271, 221, 268, 214, 268, 198, 246, 191, 243, 191, 237, 186, 236, 186, 238, 182, 238, 181, 249, 180, 251, 180, 252, 174, 252, 172, 245, 169, 245, 168, 232, 168, 226, 168, 231, 158, 232, 158, 231, 144, 231, 133, 238, 116, 238, 95, 248, 91, 250, 91, 250, 86, 244, 87, 235, 87, 232, 84, 232, 77, 237, 71, 237, 69, 250, 59, 251, 59, 251, 53, 251, 50, 244, 45, 242, 45, 227, 29, 227, 28, 216, 26, 214, 26, 205, 12, 205, 10, 193, 4, 193, 3, 188, 2, 182, 2, 168, 9, 168, 10, 149, 8, 145, 8, 138, 14, 120, 14, 116, 17, 115, 17, 114, 23, 106, 23, 99, 19, 97, 19, 96, 12, 96, 10, 87, 1, 87, 0, 83, 0],
Ramanathapuram=[261, 1, 240, 10, 238, 10, 223, 27, 222, 27, 228, 54, 228, 61, 212, 65, 212, 66, 207, 67, 204, 67, 209, 58, 209, 54, 204, 47, 203, 47, 203, 38, 198, 28, 198, 24, 179, 21, 179, 20, 167, 23, 165, 23, 164, 25, 164, 27, 169, 35, 170, 35, 172, 72, 172, 75, 174, 76, 174, 78, 190, 80, 191, 80, 190, 87, 190, 91, 198, 107, 199, 107, 197, 116, 197, 117, 190, 119, 190, 120, 166, 118, 163, 118, 143, 140, 142, 140, 132, 131, 132, 130, 124, 127, 124, 126, 87, 114, 87, 113, 79, 113, 68, 113, 66, 117, 66, 119, 58, 125, 57, 125, 53, 143, 53, 144, 40, 146, 38, 146, 32, 158, 32, 160, 25, 165, 25, 166, 1, 171, 0, 171, 0, 179, 3, 179, 9, 188, 9, 189, 21, 188, 34, 188, 39, 193, 40, 193, 43, 204, 44, 204, 43, 215, 43, 218, 36, 226, 36, 227, 16, 229, 15, 229, 15, 248, 21, 255, 23, 255, 19, 275, 19, 278, 55, 289, 55, 290, 101, 279, 101, 278, 115, 280, 123, 280, 122, 278, 122, 276, 136, 274, 140, 274, 142, 272, 142, 268, 138, 264, 138, 263, 143, 261, 143, 260, 157, 258, 163, 258, 169, 253, 169, 252, 186, 248, 190, 248, 214, 238, 214, 237, 235, 237, 252, 231, 252, 230, 268, 230, 280, 235, 291, 235, 319, 229, 321, 229, 323, 226, 323, 225, 320, 223, 320, 222, 305, 223, 293, 223, 273, 210, 271, 210, 246, 183, 245, 183, 231, 158, 230, 158, 239, 118, 239, 116, 260, 84, 260, 82, 298, 35, 299, 35, 294, 31, 294, 30, 279, 25, 276, 25, 264, 3, 264, 1, 261, 0],
Ranipet=[150, 3, 146, 18, 146, 20, 132, 23, 132, 29, 125, 29, 122, 25, 122, 23, 116, 20, 100, 20, 89, 31, 88, 31, 77, 22, 74, 22, 71, 31, 71, 33, 78, 40, 79, 40, 79, 44, 75, 45, 75, 46, 54, 46, 45, 46, 38, 43, 36, 43, 32, 36, 31, 36, 32, 46, 32, 58, 25, 72, 25, 84, 19, 83, 15, 83, 12, 88, 12, 90, 4, 91, 2, 91, 2, 101, 10, 106, 10, 108, 7, 108, 3, 108, 1, 121, 0, 121, 6, 145, 6, 146, 17, 139, 23, 139, 22, 141, 22, 144, 31, 149, 31, 155, 39, 159, 41, 159, 53, 170, 53, 171, 56, 172, 57, 172, 63, 166, 65, 166, 58, 184, 57, 184, 57, 193, 60, 196, 60, 197, 66, 197, 70, 190, 70, 189, 80, 185, 82, 185, 86, 177, 87, 177, 90, 150, 91, 150, 91, 141, 87, 136, 87, 129, 93, 114, 93, 108, 98, 108, 103, 108, 124, 122, 125, 122, 127, 115, 127, 106, 130, 104, 130, 103, 132, 102, 139, 102, 155, 93, 157, 93, 157, 86, 161, 81, 161, 80, 176, 73, 178, 73, 196, 60, 197, 60, 197, 48, 191, 44, 179, 44, 177, 29, 177, 25, 183, 21, 183, 17, 172, 14, 166, 14, 163, 7, 163, 6, 155, 6, 154, 4, 154, 1, 150, 0],
Salem=[178, 1, 171, 2, 166, 2, 128, 16, 119, 16, 106, 23, 106, 24, 76, 16, 43, 16, 35, 9, 35, 8, 28, 6, 18, 6, 13, 2, 13, 1, 8, 5, 5, 5, 9, 14, 9, 21, 0, 46, 0, 52, 12, 53, 16, 53, 19, 57, 20, 57, 14, 106, 14, 112, 21, 116, 21, 117, 34, 112, 35, 112, 33, 125, 32, 125, 34, 135, 34, 138, 30, 142, 29, 142, 25, 157, 25, 160, 18, 169, 18, 171, 33, 177, 43, 177, 43, 169, 46, 169, 52, 178, 56, 178, 60, 170, 62, 170, 68, 181, 68, 182, 84, 188, 88, 188, 96, 176, 96, 175, 101, 174, 105, 174, 109, 170, 110, 170, 116, 154, 116, 153, 128, 153, 143, 153, 148, 148, 148, 147, 153, 146, 153, 145, 170, 144, 179, 144, 192, 138, 192, 137, 202, 138, 209, 138, 217, 130, 217, 129, 222, 129, 225, 133, 226, 133, 231, 145, 233, 145, 241, 136, 241, 135, 261, 129, 267, 129, 278, 145, 279, 145, 279, 151, 266, 165, 265, 165, 268, 178, 268, 181, 278, 192, 278, 193, 293, 191, 294, 191, 291, 195, 291, 199, 300, 204, 302, 204, 306, 211, 307, 211, 306, 225, 313, 225, 324, 216, 324, 215, 334, 213, 335, 213, 341, 203, 342, 203, 339, 195, 339, 187, 353, 178, 353, 177, 366, 177, 369, 177, 387, 192, 387, 193, 393, 191, 395, 191, 398, 187, 398, 181, 388, 167, 388, 166, 392, 162, 392, 161, 409, 154, 410, 154, 409, 152, 409, 150, 399, 143, 397, 143, 397, 132, 387, 121, 386, 121, 390, 104, 391, 104, 391, 96, 388, 94, 388, 93, 354, 95, 350, 95, 347, 108, 343, 108, 335, 76, 335, 73, 337, 69, 337, 67, 341, 65, 343, 65, 349, 55, 351, 55, 355, 45, 355, 38, 345, 34, 337, 34, 304, 55, 293, 55, 276, 48, 274, 48, 262, 34, 257, 34, 242, 55, 242, 57, 233, 65, 228, 65, 239, 47, 240, 47, 246, 27, 247, 27, 246, 22, 246, 20, 237, 22, 235, 22, 230, 14, 230, 13, 219, 20, 216, 20, 213, 15, 213, 13, 206, 9, 203, 9, 204, 1, 204, 0, 178, 0],
Sivagangai=[117, 1, 114, 4, 114, 12, 109, 14, 107, 14, 99, 22, 98, 22, 99, 29, 99, 33, 91, 37, 88, 37, 98, 55, 99, 55, 99, 67, 95, 77, 95, 87, 98, 90, 98, 92, 111, 98, 113, 98, 118, 107, 119, 107, 110, 123, 109, 123, 116, 140, 117, 140, 116, 148, 116, 150, 109, 154, 109, 155, 82, 163, 80, 163, 65, 179, 65, 180, 61, 181, 61, 182, 50, 185, 50, 186, 36, 186, 31, 186, 8, 195, 6, 195, 4, 199, 3, 199, 5, 202, 5, 203, 27, 204, 27, 210, 22, 216, 22, 217, 14, 212, 11, 212, 8, 221, 0, 221, 4, 226, 4, 229, 28, 224, 28, 223, 41, 224, 44, 224, 53, 232, 54, 232, 58, 245, 58, 246, 62, 245, 64, 245, 70, 238, 73, 238, 78, 254, 78, 256, 95, 262, 97, 262, 106, 272, 106, 273, 109, 274, 127, 274, 159, 286, 162, 286, 173, 293, 175, 293, 182, 301, 184, 301, 200, 282, 200, 281, 212, 281, 231, 281, 236, 278, 238, 278, 240, 273, 241, 273, 233, 253, 232, 253, 232, 241, 232, 239, 220, 238, 215, 238, 214, 234, 213, 234, 212, 202, 212, 199, 206, 186, 206, 184, 213, 182, 213, 181, 231, 184, 237, 184, 243, 202, 243, 208, 248, 215, 249, 215, 244, 224, 244, 228, 249, 227, 253, 227, 268, 222, 269, 222, 263, 189, 263, 188, 276, 175, 276, 173, 300, 162, 302, 162, 304, 158, 305, 158, 304, 147, 304, 145, 283, 136, 281, 136, 279, 131, 278, 131, 282, 122, 282, 120, 296, 108, 297, 108, 296, 105, 296, 103, 282, 99, 279, 99, 270, 92, 270, 91, 263, 92, 256, 92, 247, 88, 244, 88, 238, 78, 238, 76, 232, 71, 232, 70, 225, 73, 224, 73, 220, 83, 220, 84, 204, 82, 202, 82, 195, 87, 193, 87, 191, 85, 190, 85, 188, 70, 188, 66, 184, 62, 183, 62, 182, 54, 182, 51, 162, 42, 161, 42, 131, 74, 127, 74, 123, 69, 123, 59, 137, 39, 137, 28, 128, 17, 127, 17, 130, 10, 130, 6, 117, 0],
Tenkasi=[63, 15, 61, 18, 61, 20, 55, 23, 53, 23, 48, 30, 47, 30, 47, 46, 47, 50, 39, 71, 38, 71, 36, 89, 36, 91, 18, 104, 17, 104, 15, 114, 15, 116, 0, 132, 0, 141, 34, 184, 34, 187, 37, 188, 56, 188, 73, 185, 81, 185, 92, 202, 92, 204, 106, 214, 106, 215, 112, 214, 113, 214, 119, 201, 119, 200, 142, 205, 148, 205, 157, 185, 158, 185, 158, 179, 151, 174, 151, 171, 159, 159, 159, 158, 170, 164, 170, 165, 187, 165, 192, 165, 186, 160, 186, 153, 193, 145, 193, 143, 185, 135, 185, 132, 190, 120, 190, 118, 201, 111, 201, 110, 199, 106, 199, 104, 191, 105, 182, 105, 184, 93, 184, 90, 190, 81, 190, 79, 195, 76, 195, 75, 205, 81, 205, 82, 214, 82, 222, 82, 233, 78, 235, 78, 240, 68, 241, 68, 241, 61, 236, 59, 236, 58, 221, 58, 197, 46, 197, 45, 156, 38, 153, 38, 143, 22, 143, 20, 134, 15, 134, 14, 131, 13, 127, 13, 124, 19, 124, 22, 116, 25, 107, 25, 102, 17, 102, 15, 91, 7, 91, 6, 63, 0],
Thanjavur=[248, 1, 240, 11, 232, 11, 219, 35, 219, 36, 200, 45, 198, 45, 169, 70, 169, 72, 149, 82, 149, 83, 141, 82, 138, 82, 126, 87, 113, 87, 101, 100, 101, 101, 96, 102, 96, 103, 85, 103, 73, 103, 30, 118, 30, 119, 18, 120, 8, 120, 2, 123, 0, 123, 2, 126, 2, 127, 7, 128, 7, 129, 34, 126, 36, 126, 36, 164, 36, 170, 50, 172, 58, 172, 71, 165, 71, 164, 83, 166, 86, 166, 95, 173, 96, 173, 104, 187, 104, 188, 117, 191, 119, 191, 123, 196, 123, 198, 140, 212, 141, 212, 140, 218, 140, 220, 127, 230, 126, 230, 122, 239, 121, 239, 124, 247, 124, 248, 140, 248, 140, 250, 131, 254, 129, 254, 128, 257, 127, 257, 128, 270, 128, 274, 121, 297, 120, 297, 122, 309, 122, 316, 115, 325, 115, 328, 138, 332, 140, 332, 142, 336, 143, 336, 141, 339, 141, 340, 135, 340, 130, 340, 126, 343, 126, 348, 157, 359, 159, 359, 173, 333, 174, 333, 178, 320, 178, 318, 183, 314, 183, 313, 195, 309, 199, 309, 222, 297, 222, 296, 237, 297, 243, 297, 243, 288, 251, 280, 252, 280, 246, 276, 241, 276, 241, 264, 241, 257, 245, 247, 245, 240, 234, 227, 233, 227, 233, 217, 233, 216, 202, 207, 201, 207, 200, 195, 200, 190, 194, 181, 193, 181, 195, 175, 195, 167, 182, 156, 181, 156, 178, 142, 177, 142, 179, 120, 180, 120, 177, 107, 176, 107, 176, 103, 191, 92, 191, 91, 196, 92, 198, 92, 214, 104, 214, 105, 221, 105, 229, 105, 236, 109, 236, 110, 239, 109, 242, 109, 245, 105, 246, 105, 244, 101, 244, 91, 254, 84, 255, 84, 255, 71, 260, 61, 261, 61, 260, 54, 260, 45, 264, 43, 265, 43, 261, 27, 261, 21, 266, 10, 267, 10, 258, 2, 258, 1, 248, 0],
Theni=[146, 1, 117, 16, 117, 17, 96, 24, 96, 25, 87, 25, 77, 20, 73, 20, 52, 26, 52, 27, 27, 25, 20, 25, 13, 31, 12, 31, 10, 34, 10, 40, 24, 54, 25, 54, 32, 77, 32, 87, 22, 97, 21, 97, 17, 105, 16, 105, 18, 117, 19, 117, 17, 128, 17, 134, 21, 139, 21, 143, 18, 155, 18, 161, 12, 170, 11, 170, 9, 180, 9, 183, 1, 197, 0, 197, 0, 203, 3, 205, 3, 206, 24, 215, 24, 216, 29, 217, 35, 217, 48, 212, 48, 211, 54, 216, 57, 216, 62, 210, 64, 210, 64, 218, 64, 226, 74, 235, 74, 236, 100, 223, 101, 223, 125, 184, 126, 184, 133, 167, 133, 165, 149, 151, 150, 151, 160, 122, 160, 119, 176, 94, 178, 94, 182, 76, 182, 72, 187, 65, 188, 65, 182, 42, 182, 39, 173, 30, 173, 26, 189, 21, 189, 16, 182, 8, 182, 7, 146, 0],
Thoothukudi=[138, 1, 130, 6, 129, 6, 123, 19, 123, 21, 118, 26, 113, 26, 109, 36, 109, 38, 101, 42, 99, 42, 90, 53, 90, 54, 80, 59, 74, 59, 66, 46, 62, 46, 57, 58, 57, 60, 48, 66, 48, 67, 37, 69, 25, 69, 18, 63, 18, 62, 12, 63, 10, 63, 1, 82, 0, 82, 0, 93, 9, 92, 17, 92, 17, 95, 18, 95, 18, 100, 17, 101, 12, 101, 8, 106, 7, 106, 3, 118, 3, 124, 10, 129, 10, 134, 4, 137, 4, 148, 8, 151, 8, 152, 20, 153, 22, 153, 26, 158, 26, 160, 42, 173, 43, 173, 56, 195, 57, 195, 56, 199, 56, 201, 47, 211, 46, 211, 49, 226, 49, 242, 37, 264, 37, 269, 55, 298, 56, 298, 56, 320, 62, 332, 63, 332, 60, 340, 60, 345, 73, 356, 73, 357, 92, 357, 95, 357, 103, 352, 103, 351, 123, 345, 125, 345, 128, 340, 129, 340, 132, 326, 132, 324, 146, 308, 147, 308, 153, 292, 154, 292, 156, 281, 156, 269, 153, 259, 153, 244, 157, 233, 157, 230, 167, 217, 167, 216, 169, 215, 176, 215, 178, 210, 179, 210, 177, 202, 177, 201, 174, 201, 173, 206, 170, 206, 167, 203, 166, 203, 165, 197, 164, 197, 166, 182, 166, 177, 173, 158, 173, 155, 184, 139, 184, 137, 197, 124, 197, 123, 222, 108, 225, 108, 228, 103, 228, 101, 241, 92, 244, 92, 242, 90, 242, 89, 208, 78, 207, 78, 206, 76, 206, 73, 211, 60, 211, 55, 208, 54, 206, 54, 204, 49, 203, 49, 204, 30, 204, 28, 187, 23, 185, 23, 167, 5, 167, 2, 138, 0],
Tiruchirapalli=[110, 1, 97, 21, 96, 21, 101, 26, 101, 34, 79, 77, 79, 80, 61, 102, 60, 102, 60, 128, 60, 130, 51, 122, 51, 121, 42, 117, 39, 117, 29, 108, 25, 108, 21, 120, 21, 121, 4, 121, 3, 121, 6, 131, 6, 134, 1, 138, 0, 138, 5, 154, 5, 157, 11, 163, 11, 164, 15, 166, 21, 166, 38, 160, 38, 159, 60, 159, 89, 164, 92, 164, 100, 171, 101, 171, 100, 178, 100, 179, 109, 185, 109, 186, 119, 189, 121, 189, 133, 205, 134, 205, 129, 215, 126, 215, 132, 226, 132, 233, 122, 245, 122, 246, 85, 260, 85, 261, 76, 249, 76, 247, 66, 240, 66, 239, 56, 249, 56, 250, 46, 247, 40, 247, 36, 258, 35, 258, 33, 281, 33, 289, 30, 296, 30, 298, 23, 301, 15, 301, 13, 297, 11, 297, 7, 304, 6, 304, 6, 313, 15, 322, 15, 323, 28, 326, 32, 326, 43, 332, 46, 332, 46, 340, 46, 345, 39, 355, 39, 359, 52, 369, 53, 369, 55, 385, 55, 386, 70, 386, 78, 382, 80, 382, 82, 379, 83, 379, 81, 374, 81, 370, 94, 360, 97, 360, 100, 349, 100, 348, 110, 354, 114, 354, 121, 343, 121, 342, 134, 337, 136, 337, 140, 332, 141, 332, 142, 329, 142, 324, 137, 319, 137, 308, 134, 306, 134, 305, 130, 306, 128, 306, 119, 318, 114, 318, 103, 300, 102, 300, 98, 286, 97, 286, 105, 276, 105, 275, 116, 269, 118, 269, 124, 259, 124, 258, 126, 257, 128, 257, 134, 261, 134, 262, 140, 261, 143, 261, 159, 245, 159, 244, 162, 245, 163, 245, 167, 258, 171, 258, 179, 242, 179, 240, 189, 248, 190, 248, 193, 258, 193, 259, 202, 262, 202, 263, 210, 263, 211, 261, 211, 258, 216, 255, 216, 254, 234, 254, 240, 250, 241, 250, 242, 208, 242, 205, 240, 203, 232, 203, 223, 207, 214, 207, 206, 204, 206, 202, 236, 197, 240, 197, 279, 182, 281, 182, 283, 176, 283, 174, 267, 161, 267, 160, 274, 157, 276, 157, 275, 156, 275, 151, 285, 139, 286, 139, 285, 129, 285, 125, 276, 115, 276, 114, 243, 111, 237, 111, 228, 119, 226, 119, 220, 117, 219, 117, 218, 111, 218, 107, 215, 105, 215, 104, 205, 104, 195, 110, 193, 110, 192, 128, 190, 128, 179, 110, 178, 110, 173, 92, 173, 85, 181, 74, 182, 74, 187, 61, 187, 57, 194, 46, 195, 46, 194, 37, 194, 35, 189, 32, 169, 32, 165, 29, 164, 29, 165, 26, 165, 24, 177, 14, 177, 12, 166, 13, 164, 13, 156, 23, 156, 24, 148, 25, 146, 25, 144, 28, 144, 30, 136, 35, 130, 35, 129, 19, 129, 17, 117, 9, 115, 9, 117, 1, 117, 0, 110, 0],
Tirunelveli=[0, 7, 1, 7, 1, 9, 2, 9, 2, 6, 1, 6, 1, 2, 0, 2],
Tirupathur=[162, 17, 141, 33, 141, 34, 128, 38, 122, 38, 106, 50, 106, 51, 99, 50, 77, 50, 67, 53, 65, 53, 65, 45, 64, 45, 62, 55, 62, 57, 46, 72, 45, 72, 45, 83, 45, 85, 43, 87, 42, 87, 37, 79, 31, 79, 30, 89, 30, 95, 21, 102, 20, 102, 16, 113, 0, 113, 5, 136, 5, 163, 11, 170, 11, 171, 21, 177, 22, 177, 19, 184, 18, 184, 19, 191, 19, 193, 20, 194, 25, 194, 31, 189, 41, 189, 60, 198, 62, 198, 70, 208, 71, 208, 70, 212, 68, 212, 66, 232, 66, 234, 88, 241, 90, 241, 100, 230, 101, 230, 116, 200, 117, 200, 148, 130, 149, 130, 134, 130, 134, 126, 139, 114, 140, 114, 140, 89, 144, 65, 144, 62, 159, 56, 160, 56, 159, 53, 159, 45, 162, 41, 162, 38, 155, 31, 155, 29, 162, 23, 163, 23, 162, 16],
Tiruppur=[34, 1, 24, 9, 24, 10, 14, 14, 11, 14, 8, 18, 7, 18, 1, 44, 0, 44, 1, 54, 1, 56, 21, 72, 23, 72, 28, 80, 29, 80, 19, 93, 18, 93, 16, 101, 16, 116, 11, 120, 10, 120, 12, 127, 12, 129, 19, 137, 20, 137, 20, 145, 14, 155, 14, 157, 38, 157, 40, 157, 55, 180, 56, 180, 54, 187, 54, 189, 47, 197, 46, 197, 43, 213, 43, 224, 60, 240, 60, 246, 53, 255, 53, 256, 44, 256, 32, 256, 27, 260, 26, 260, 25, 280, 25, 285, 16, 305, 15, 305, 17, 312, 17, 314, 28, 325, 29, 325, 30, 348, 30, 351, 64, 340, 71, 340, 74, 343, 74, 357, 81, 372, 81, 374, 93, 381, 93, 383, 98, 381, 100, 381, 111, 373, 113, 373, 113, 367, 114, 367, 109, 338, 109, 324, 103, 310, 103, 308, 124, 308, 125, 308, 123, 303, 123, 295, 133, 288, 133, 287, 119, 280, 119, 278, 129, 268, 130, 268, 131, 265, 131, 257, 134, 255, 134, 254, 140, 252, 144, 252, 155, 244, 155, 243, 168, 246, 168, 247, 175, 246, 178, 246, 194, 233, 218, 233, 233, 215, 233, 214, 236, 215, 238, 215, 240, 220, 241, 220, 240, 233, 240, 243, 244, 242, 247, 242, 267, 228, 269, 228, 269, 224, 278, 214, 279, 214, 279, 209, 267, 199, 266, 199, 271, 193, 271, 192, 276, 190, 280, 190, 293, 198, 293, 199, 300, 196, 301, 196, 301, 192, 291, 186, 290, 186, 287, 177, 287, 175, 278, 178, 275, 178, 267, 169, 267, 168, 261, 166, 258, 166, 255, 162, 254, 162, 260, 149, 261, 149, 257, 132, 257, 121, 264, 111, 265, 111, 260, 96, 260, 95, 224, 80, 224, 79, 213, 77, 213, 76, 184, 80, 184, 81, 162, 81, 141, 76, 141, 75, 131, 78, 129, 78, 137, 61, 137, 53, 130, 43, 129, 43, 131, 35, 132, 35, 130, 25, 130, 22, 121, 12, 121, 11, 118, 10, 113, 10, 115, 17, 115, 24, 110, 29, 107, 29, 99, 22, 98, 22, 95, 5, 95, 4, 87, 9, 82, 9, 74, 0, 66, 0, 59, 4, 56, 4, 56, 8, 53, 8, 47, 1, 47, 0, 34, 0],
Tiruvallur=[261, 1, 250, 5, 250, 6, 238, 7, 237, 7, 241, 13, 241, 14, 244, 15, 249, 15, 250, 19, 250, 23, 242, 26, 240, 26, 235, 31, 234, 31, 231, 42, 231, 43, 225, 49, 223, 49, 220, 61, 220, 64, 216, 69, 216, 70, 197, 80, 197, 81, 192, 82, 179, 82, 171, 87, 171, 88, 164, 86, 159, 86, 154, 91, 152, 91, 151, 96, 151, 99, 166, 110, 168, 110, 166, 113, 166, 114, 162, 116, 158, 116, 141, 109, 139, 109, 137, 105, 136, 105, 136, 96, 136, 93, 131, 89, 131, 88, 124, 88, 116, 96, 116, 97, 103, 101, 96, 101, 86, 81, 86, 79, 82, 76, 82, 75, 50, 76, 45, 76, 31, 82, 31, 84, 44, 91, 45, 91, 46, 95, 46, 105, 50, 109, 56, 109, 54, 116, 54, 118, 50, 121, 50, 122, 37, 125, 34, 125, 27, 130, 25, 130, 11, 154, 11, 156, 1, 154, 0, 154, 1, 161, 1, 163, 7, 166, 7, 167, 22, 169, 22, 170, 38, 169, 44, 169, 48, 166, 49, 166, 42, 156, 41, 156, 44, 148, 44, 145, 56, 154, 59, 154, 69, 143, 84, 143, 88, 145, 90, 145, 94, 152, 101, 152, 102, 151, 102, 146, 111, 144, 114, 144, 116, 141, 117, 141, 120, 123, 122, 123, 124, 128, 124, 129, 127, 130, 132, 130, 134, 134, 134, 137, 151, 140, 152, 140, 146, 148, 145, 148, 148, 159, 148, 167, 160, 167, 165, 171, 166, 171, 165, 176, 165, 182, 173, 185, 174, 185, 179, 200, 179, 202, 188, 209, 188, 210, 198, 210, 200, 210, 206, 203, 207, 203, 203, 196, 203, 195, 218, 194, 219, 194, 219, 191, 209, 185, 207, 185, 205, 180, 205, 179, 229, 179, 238, 179, 249, 182, 249, 183, 288, 182, 291, 182, 291, 179, 291, 178, 296, 174, 296, 163, 294, 164, 292, 164, 290, 171, 290, 172, 286, 170, 285, 170, 284, 167, 284, 164, 290, 156, 290, 153, 282, 148, 281, 148, 282, 140, 282, 137, 291, 134, 295, 134, 299, 122, 299, 121, 304, 121, 309, 127, 312, 127, 320, 121, 320, 119, 328, 117, 333, 117, 333, 113, 333, 110, 342, 114, 347, 114, 349, 111, 349, 98, 356, 98, 357, 98, 362, 81, 362, 64, 353, 43, 353, 41, 346, 43, 344, 43, 333, 28, 333, 26, 327, 22, 327, 21, 312, 16, 312, 15, 303, 15, 296, 15, 293, 11, 287, 11, 282, 15, 281, 15, 279, 21, 279, 22, 272, 22, 268, 22, 268, 3, 268, 1, 261, 0],
Tiruvannamalai=[283, 5, 277, 25, 276, 25, 279, 35, 281, 35, 276, 68, 276, 72, 271, 77, 271, 78, 263, 81, 261, 81, 256, 88, 256, 89, 251, 89, 249, 85, 248, 85, 248, 78, 256, 64, 256, 59, 246, 63, 244, 63, 227, 49, 224, 49, 222, 45, 222, 41, 215, 37, 213, 37, 215, 33, 215, 32, 212, 32, 212, 31, 196, 39, 196, 54, 179, 50, 162, 50, 155, 54, 147, 54, 136, 67, 136, 68, 130, 70, 125, 70, 123, 76, 123, 77, 94, 76, 91, 76, 76, 101, 75, 101, 48, 160, 48, 163, 25, 205, 25, 207, 13, 219, 12, 219, 15, 225, 15, 228, 13, 231, 13, 234, 2, 243, 1, 243, 2, 247, 4, 247, 1, 258, 0, 258, 0, 263, 12, 263, 16, 266, 16, 267, 28, 262, 28, 261, 34, 263, 35, 263, 22, 302, 21, 302, 23, 315, 23, 316, 90, 301, 95, 301, 109, 288, 109, 287, 125, 283, 125, 282, 131, 282, 137, 291, 137, 292, 148, 290, 154, 290, 158, 301, 162, 301, 173, 294, 173, 293, 180, 295, 184, 295, 202, 286, 205, 286, 220, 273, 221, 273, 218, 266, 218, 265, 203, 257, 202, 257, 202, 253, 208, 250, 210, 250, 212, 245, 213, 245, 212, 232, 212, 225, 219, 205, 220, 205, 217, 201, 217, 200, 199, 195, 198, 195, 198, 191, 203, 188, 204, 188, 202, 165, 202, 161, 206, 156, 206, 155, 210, 153, 228, 153, 245, 157, 255, 157, 275, 174, 275, 175, 295, 185, 295, 186, 308, 183, 317, 183, 317, 184, 332, 184, 341, 188, 341, 189, 346, 187, 347, 187, 359, 166, 359, 164, 369, 160, 377, 160, 372, 136, 372, 134, 384, 127, 384, 126, 379, 123, 373, 123, 368, 109, 368, 103, 347, 103, 345, 97, 345, 93, 339, 87, 339, 84, 344, 75, 344, 74, 352, 74, 370, 67, 372, 67, 374, 65, 374, 51, 380, 47, 380, 46, 362, 36, 362, 34, 356, 38, 350, 38, 347, 31, 347, 28, 343, 25, 343, 24, 331, 21, 326, 21, 295, 2, 295, 1, 283, 0],
Tiruvarur=[131, 1, 108, 15, 108, 16, 80, 15, 79, 15, 79, 26, 69, 33, 68, 33, 69, 45, 69, 49, 64, 51, 64, 52, 53, 48, 53, 47, 43, 47, 39, 47, 21, 34, 21, 33, 12, 36, 10, 36, 1, 46, 0, 46, 3, 55, 4, 55, 1, 83, 1, 85, 6, 98, 6, 100, 11, 103, 13, 103, 18, 110, 19, 110, 20, 114, 20, 115, 17, 119, 17, 124, 21, 128, 22, 128, 25, 138, 25, 150, 55, 159, 57, 159, 55, 161, 55, 167, 68, 183, 69, 183, 65, 216, 65, 220, 76, 222, 76, 223, 67, 231, 67, 240, 79, 243, 85, 243, 88, 237, 88, 229, 96, 232, 96, 233, 104, 232, 113, 232, 109, 235, 109, 236, 98, 237, 95, 237, 91, 242, 91, 245, 93, 246, 111, 246, 142, 253, 149, 253, 148, 249, 148, 247, 126, 238, 124, 238, 124, 236, 128, 236, 140, 241, 140, 240, 129, 232, 128, 232, 123, 221, 123, 207, 126, 201, 126, 200, 135, 197, 144, 197, 151, 172, 152, 172, 149, 165, 149, 164, 135, 162, 134, 162, 137, 155, 137, 149, 134, 141, 134, 136, 128, 132, 128, 128, 134, 122, 135, 122, 135, 111, 135, 107, 142, 103, 143, 103, 147, 89, 147, 86, 155, 74, 155, 69, 151, 67, 147, 67, 131, 73, 129, 73, 131, 64, 132, 64, 129, 58, 129, 52, 136, 42, 136, 40, 148, 35, 153, 35, 151, 32, 150, 32, 152, 23, 152, 21, 149, 19, 149, 17, 157, 19, 157, 20, 162, 18, 162, 12, 159, 8, 159, 5, 131, 0],
Vellore=[213, 1, 209, 3, 207, 3, 201, 11, 200, 11, 192, 33, 192, 35, 183, 34, 176, 34, 166, 39, 166, 40, 148, 35, 145, 35, 132, 26, 132, 25, 115, 25, 110, 25, 106, 32, 106, 37, 103, 37, 96, 27, 96, 26, 92, 26, 92, 25, 74, 23, 69, 23, 59, 29, 59, 30, 52, 30, 46, 26, 42, 26, 37, 37, 37, 39, 31, 44, 31, 45, 21, 45, 18, 45, 8, 52, 6, 52, 12, 64, 12, 72, 3, 89, 2, 89, 1, 110, 0, 110, 0, 119, 13, 117, 13, 116, 33, 117, 42, 117, 57, 106, 57, 105, 73, 100, 78, 100, 98, 82, 99, 82, 98, 85, 98, 88, 91, 94, 90, 94, 96, 104, 97, 104, 95, 118, 95, 121, 91, 123, 91, 124, 82, 124, 81, 124, 79, 131, 78, 131, 75, 168, 75, 180, 70, 195, 70, 196, 82, 194, 85, 194, 99, 170, 99, 168, 105, 165, 105, 164, 131, 166, 134, 166, 137, 163, 137, 159, 148, 155, 150, 155, 157, 145, 157, 144, 173, 140, 173, 139, 190, 139, 202, 143, 207, 143, 208, 142, 208, 123, 202, 108, 202, 104, 205, 94, 205, 90, 212, 90, 212, 87, 204, 81, 204, 74, 212, 72, 214, 72, 218, 66, 218, 65, 226, 67, 227, 67, 228, 62, 228, 52, 233, 41, 234, 41, 234, 16, 234, 12, 226, 3, 226, 2, 213, 0],
Vilippuram=[13, 1, 6, 5, 5, 5, 7, 29, 7, 30, 5, 35, 5, 37, 0, 38, 0, 43, 22, 50, 22, 52, 18, 60, 17, 60, 15, 72, 14, 72, 14, 93, 14, 96, 4, 101, 4, 105, 22, 116, 23, 116, 22, 120, 22, 122, 15, 128, 14, 128, 18, 136, 18, 138, 31, 144, 31, 145, 44, 145, 45, 145, 43, 154, 43, 159, 50, 171, 50, 173, 44, 171, 40, 171, 41, 176, 41, 178, 45, 182, 45, 183, 67, 192, 67, 193, 83, 198, 94, 198, 126, 212, 129, 212, 144, 225, 144, 226, 152, 226, 166, 212, 167, 212, 161, 193, 160, 193, 166, 190, 166, 182, 174, 189, 174, 190, 178, 189, 179, 189, 177, 181, 177, 179, 165, 167, 164, 167, 172, 162, 172, 156, 153, 154, 153, 152, 163, 145, 163, 144, 172, 154, 172, 155, 186, 152, 188, 152, 189, 154, 189, 157, 181, 160, 180, 160, 181, 166, 181, 170, 185, 176, 185, 178, 205, 161, 205, 160, 216, 168, 217, 168, 221, 153, 222, 153, 222, 149, 218, 148, 218, 136, 228, 139, 229, 139, 245, 106, 245, 104, 268, 73, 269, 73, 269, 67, 254, 77, 254, 78, 240, 76, 240, 71, 234, 73, 229, 73, 213, 51, 213, 49, 199, 38, 199, 37, 186, 40, 186, 41, 174, 39, 165, 39, 156, 43, 154, 43, 146, 37, 146, 36, 135, 32, 135, 31, 121, 30, 110, 30, 105, 33, 98, 33, 80, 22, 78, 22, 68, 11, 68, 10, 60, 6, 60, 5, 13, 0],
Virudhunagar=[291, 1, 270, 5, 270, 6, 267, 2, 263, 2, 255, 6, 253, 6, 249, 13, 248, 13, 249, 30, 249, 33, 240, 33, 220, 45, 220, 46, 207, 43, 199, 43, 192, 49, 190, 49, 172, 45, 172, 44, 157, 45, 153, 45, 150, 43, 148, 43, 146, 36, 146, 33, 143, 31, 143, 30, 133, 26, 133, 25, 116, 31, 116, 32, 102, 26, 96, 26, 89, 41, 89, 42, 74, 45, 70, 45, 67, 48, 65, 48, 58, 65, 58, 67, 25, 80, 23, 80, 20, 84, 19, 84, 21, 87, 21, 88, 16, 103, 16, 105, 11, 108, 4, 108, 1, 116, 0, 116, 1, 124, 1, 125, 26, 131, 28, 131, 43, 148, 43, 149, 58, 147, 60, 147, 63, 138, 69, 138, 80, 147, 81, 147, 85, 158, 85, 160, 90, 162, 90, 163, 128, 169, 132, 169, 153, 180, 153, 181, 160, 182, 160, 183, 176, 185, 176, 186, 180, 183, 183, 183, 191, 195, 191, 196, 199, 196, 208, 190, 210, 190, 220, 178, 224, 178, 231, 168, 231, 165, 239, 160, 240, 160, 247, 145, 247, 143, 257, 138, 257, 137, 276, 139, 283, 139, 302, 159, 302, 160, 320, 166, 339, 166, 346, 159, 347, 159, 349, 150, 350, 150, 345, 132, 345, 130, 339, 126, 339, 125, 326, 126, 314, 126, 310, 121, 310, 118, 305, 116, 305, 110, 329, 104, 331, 104, 344, 85, 344, 84, 357, 82, 359, 82, 361, 72, 361, 66, 373, 53, 373, 50, 354, 36, 345, 36, 340, 27, 340, 18, 337, 16, 337, 15, 333, 15, 326, 23, 322, 23, 321, 21, 321, 14, 313, 5, 313, 4, 305, 1, 305, 0, 291, 0]
}
var ka_ke=[94.90,139.44,88.78,135.56,83.70,130.63,79.70,126.59,71.71,126.97,67.37,121.30,60.27,117.68,55.87,111.72,51.06,106.85,50.52,102.56,47.17,97.32,42.26,97.07,38.75,94.94, 30.07,88.62]
var kewest=[30.07,88.62, 34.83,98.85,36.57,106.64,39.07,114.28,41.11,122.00,46.54,124.78,47.80,129.13,53.79,133.99,57.38,140.82,58.42,146.53,64.02,151.07,64.27,155.68,65.68,159.80,67.56,167.54,69.39,175.29,71.04,176.31,70.60,181.08,74.36,187.18,74.55,187.92,77.14,195.23,79.77,201.06,82.18,203.42,79.76,206.72,84.13,213.19,86.37,220.48,87.27,228.27,89.69,231.02,85.16,226.51,84.15,219.82,81.77,212.27,81.61,215.73,83.01,223.55,83.54,231.59,85.21,239.33,88.36,246.71,89.43,247.72,90.03,248.34,91.46,254.65,94.58,255.46,94.47,259.58,96.28,263.02,101.20,269.39,106.42,275.49,110.87,281.65, 117.66,283.70]
var kawest:=[149.30,-140.35,139.53,-131.47,132.87,-125.48,124.01,-122.21,119.64,-114.02,109.42,-109.59,106.57,-100.83,97.43,-101.07,86.52,-104.44,75.57,-107.44,74.46,-94.61,71.73,-87.90,59.51,-86.20,50.05,-85.76,42.31,-80.27,31.32,-74.03,22.43,-75.01,14.25,-69.74,17.78,-59.63,19.31,-51.75,18.31,-43.28,11.63,-38.73,11.60,-31.83,14.27,-20.46,12.24,-11.10,5.42,-4.52,0.43,0.10,9.54,7.54,13.50,18.54,15.02,30.09,21.58,42.10,23.63,52.83,23.95,63.03,26.07,76.72,30.07,88.62]
var ka_ap:=[396.96,-162.69,391.27,-158.05,386.29,-153.53,379.33,-147.00,373.82,-138.52,371.14,-129.77,361.96,-129.59,356.07,-131.23,346.57,-133.42,347.11,-122.56,339.80,-116.40,327.68,-114.71,316.02,-110.13,302.25,-109.79,288.97,-107.48,285.64,-101.77,293.93,-95.99,297.92,-86.95,286.03,-82.75,275.56,-83.40,266.73,-80.93,274.27,-73.98,269.27,-70.83,259.98,-78.51,252.21,-71.11,247.83,-62.31,236.26,-64.49,222.28,-62.82,219.75,-50.97,210.29,-48.93,201.24,-39.88,188.51,-42.62,177.12,-37.01,166.11,-35.44,152.08,-35.79,139.35,-36.68,127.94,-31.95,126.93,-20.99,129.61,-9.76,126.25,-0.13,115.05,-2.18,116.51,9.48,116.99,20.96,120.17,27.96,128.09,29.62,137.67,33.15,142.84,34.48,138.51,42.65,132.14,41.61,122.75,35.76,120.84,39.54,121.33,50.46,129.26,45.45,138.94,52.18,149.23,51.76,158.82,46.38,162.79,49.21,165.09,57.79,174.13,60.95,177.47,72.43,184.48,79.69]
var apeast=[257.15,64.23,255.84,50.32,253.61,36.57,256.15,29.11,255.62,15.28,252.58,1.70,256.00,-11.67,262.68,-23.81,273.40,-31.07,282.31,-27.04,286.42,-28.69,290.93,-30.07,299.34,-40.62,308.52,-48.66,305.21,-50.66,318.79,-48.44,326.05,-48.40,338.56,-54.30,343.64,-59.29,345.23,-72.46,341.95,-69.27,349.82,-79.81,360.56,-88.63,373.36,-94.11,383.77,-102.47,392.83,-112.79,404.66,-120.19,416.33,-127.49,425.10,-136.85,433.26,-147.87,441.19,-158.11,436.00,-157.52,428.06,-150.88,416.82,-146.93,405.85,-152.80,398.14,-161.60]

var score=0
var attempts=0
var turns=10
var game_in_progress=0
var rng=RandomNumberGenerator.new()

var challenge:=''
var selected_district:=''
var selected_color:=Color.darkorange
var deselect_color:=Color.lightyellow#Color("eeffcc88")
var selected_color_right:=Color.lightgreen
var selected_color_wrong:=Color.lightcoral
var district_label_text_color:=Color('f6b000')
var border_color=deselect_color.darkened(.1)#Color.darkgray#.black#Color.firebrick
var border_width:=4
var tw:=Tween.new()
#var walkpath:=Line2D.new()
var path=[]

func revert_transform(poly:Polygon2D):
	if poly.transform != Transform2D.IDENTITY:
		var transformed_polygon = poly.transform.xform(poly.polygon)
		poly.transform = Transform2D.IDENTITY
		poly.polygon = transformed_polygon
		return poly

func get_largest_poly(m):
	var maxpts=0
	var maxidx=0
	for i in len(m):
		if len(m[i]) > maxpts:
			maxidx=i
			maxpts=len(m[i])
	return maxidx

func merge_poly(history_item):
	var g=history_item[0]
	#var colr=history_item[1]
	var main:Polygon2D=Polygon2D.new()
	var t=Transform2D()
	var ddims=get_node("Districts/"+g[0]).position #d[g[0]]
	var p1=get_node("Districts/"+g[0]+"/Poly")#.get_child(0)
	t.origin=Vector2(ddims[0],ddims[1])
	var m
	if g.size()==1:
		m=t.xform(p1.polygon)
		main.polygon=m
	else:
		var t2=Transform2D()	
		ddims=get_node("Districts/"+g[1]).position #d[g[1]]
		var p2=get_node("Districts/"+g[1]+"/Poly")#.get_child(0)
		t2.origin=Vector2(ddims[0],ddims[1])
		m=Geometry.merge_polygons_2d(t.xform(p1.polygon), 
										t2.xform(p2.polygon) )
		main.polygon=m[get_largest_poly(m)]
		#print(g[0],' ',g[1],' ',len(m))
		#debug
		#var test=main.duplicate()
		#test.color=Color.blueviolet
		#add_child(test)
		for i in range(2,len(g)):
			ddims=get_node("Districts/"+g[i]).position #d[g[i]]
			t.origin=Vector2(ddims[0],ddims[1])
			var tp=t.xform(get_node("Districts/"+g[i]+'/Poly').polygon)
			m=Geometry.merge_polygons_2d(main.polygon, tp)
			main.polygon=m[get_largest_poly(m)]#m[0]
			#print(g[0],' ',g[i],' ',len(m))
			#debug
	#		#test=main.duplicate()
			#test.color=Color(rng.randi_range(70,200))
			#add_child(test)
			#cnt=cnt+1
		#main.color=Color(rng.randf_range(0.6,1.0), rng.randf_range(0.0,1.0), rng.randf_range(0.0,0.26))
	main.color=deselect_color#Color(0.34, .87, .97, 1.0)
	#Color(rng.randf_range(0.1,0.54), rng.randf_range(0.3,0.8), rng.randf_range(0.2,0.91))
	return main
	
func create_polygons(district):
	var p=Polygon2D.new()
	var c=CollisionPolygon2D.new()
	var shape
	if district=="Tirunelveli":
		shape=PoolVector2Array()
		var pts=[ -128.8, -138.5, -128, -138.5, -101, -103.5, -99, -103.5, -54, -105.5, -54, -103.3, -46, -95.3, -46, -92.8, -42.7, -85.5, -30.3, -75.5, -28.2, -75.5, -21.3, -90.5, -15.8, -90.5, 7, -86, 16, -103, 16, -104.8, 7.60001, -114.1, 8.7, -116.5, 9.89999, -116.5, 18.8, -132.5, 22.6, -132.5, 33.6, -125.5, 41, -125.5, 69, -124.5, 69, -122.4, 92, -101.4, 92, -99, 106, -79.1, 106, -73.7, 95, -61.6, 95, -55.5, 98.3, -30.5, 96.4, -30.5, 86.7, -5.7, 95.3, 13.5, 96, 13.5, 105, 24.8, 105, 47.9, 112, 58.9, 112, 63.8, 109.5, 71.2, 119.7, 79.5, 138, 79.5, 138, 90.5, 115.6, 104.5, 113.4, 104.5, 89, 115.7, 85.5, 128.5, 83.7, 128.5, 66.7, 142.5, 63, 142.5, 23.9, 151.5, -6.5, 151.5, -8, 150.9, -8, 149.6, -11, 147.6, -11, 134.5, -12.1, 118.5, -9.3, 118.5, 1.3, 113.9, -12, 92.1, -12, 88.5, -13.8, 72.4, -27, 70.2, -27, 68.5, -35, 62.5, -35, 58.5, -36.8, 46.5, -44, 37.2, -44, 30.3, -44.8, 29.5, -47.3, 29.5, -72, 20.9, -72, 19.7, -103, 3.7, -103, 2.2, -125, -22.7, -125, -25, -138, -47, -138, -53.4, -125, -64.4, -125, -66, -116.2, -82.5, -114.8, -82.5, -109, -88.3, -109, -89.7, -107.4, -96.8, -111.3, -105.5, -111.9, -105.5, -138, -137.4, -138, -151.5, -135.8, -151.5 ]
		for i in range(0,len(pts),2):
			shape.append(Vector2(pts[i]+137,pts[i+1]+151))
	else:
		shape=PoolVector2Array()
		var pts=district_polys[district]
		for i in range(0,len(pts),2):
			shape.append(Vector2(pts[i],pts[i+1]))
	p.polygon=shape
	p.color=deselect_color
	c.polygon=shape
	return [c, p]

var shore:ShaderMaterial
#func applyshore(district):
#	var dp:Polygon2D=get_node(district).get_child(0)
#	dp.material=shore

var citygrades=['','Muni Corporation','Municipality Selection grade','Municipality Special grade','Municipality First grade','Municipality Second grade']
func _ready():
	init_label_font()
	var master_sound = AudioServer.get_bus_index("Master")
	AudioServer.set_bus_mute(master_sound, true)
	shore=ShaderMaterial.new()
	shore.shader=load("res://shore1.shader")
	rng.randomize()
	add_child(tw)
	for i in citygrades:
		$HUD/Top/LabelCities.add_item(i)
	VisualServer.set_default_clear_color('001f3f')#Color("ff222222"))
	for node in $Districts.get_children():
		if node is Area2D:
			#node.get_child(0).color=deselect_color
			node.connect('input_event', self, 'on_district_select',[node.name])
		#if node is Label:
		#	node.set("custom_colors/font_color","70fa80")

	var t=get_viewport_transform()
	var viewp=get_viewport_rect()
	var hcenter=viewp.size.x/2
	var widthmultiplier= viewp.size.x/800 
	print(viewp)
	var tnoffset=$Districts/Karur.position.x 
	print($Districts.get_viewport_rect()) 
	#print('startsscreensize',$HUD/StartScreen.rect_size)
	if viewp.size.x < viewp.size.y: #portrait mode
		$HUD/StartScreen.columns=1
		$HUD/Grid.columns=3
		$HUD/Grid.anchor_top=0.5
		$HUD/Grid.anchor_right=1.0
		$HUD/Grid/MarginContainer.alignment=BoxContainer.ALIGN_END
		$HUD/Grid/MarginContainer.grow_horizontal=Control.GROW_DIRECTION_BEGIN
		$HUD/Grid/MarginContainer.size_flags_horizontal=Control.SIZE_EXPAND_FILL
	else:
		$HUD/StartScreen.columns=2
		$HUD/Grid.columns=1
		$HUD/Grid.anchor_right=.3
		$Districts.transform.origin=Vector2(viewp.size.x/2-300, 0)
		$Cities.transform.origin=Vector2(viewp.size.x/2-300, 0)
		$Gopal.transform.origin=Vector2(viewp.size.x/2-300, 0)
		$HistoryAnimator.transform.origin=Vector2(viewp.size.x/2-300, 0)
	#if viewp.size.x < 600: #portraitt mode
#		t.origin=Vector2(viewp.size.x/2,0)
#		transform=t
#		scale=Vector2(get_viewport_rect().size.x/600, get_viewport_rect().size.y/800)	
#	else:
#		#divide screen width by 2 and push left 
#		#by half of generatedwidth ie 600/2
#		t.origin=Vector2(viewp.size.x/2-300,0)
#		transform=t
#		#so viewport rect changes thanks to above transform which is why viewp can be used while scaling
#		scale=Vector2(get_viewport_rect().size.x/800, get_viewport_rect().size.y/800)
#	$Label.rect_scale=Vector2(1/scale.x, 1/scale.y)
	#$HUD/Top/Score.rect_scale=Vector2(2/scale.x, 2/scale.y)
	#for debugging resolution
	if OS.has_feature("editor"):
		print(scale)
		print(t.origin)
		$HUD/StartScreen/Title.text=str(get_viewport_rect())+"\nScale:"+str(scale)+' Origin'+str(t.origin)
	

var dhistory=[{
	Salem=[['Salem', 'Dharmapuri', 'Namakkal', 'Krishnagiri'],Color.mediumspringgreen],
	Coimbatore=[['Tiruppur', 'Coimbatore', 'Erode'], Color.darkgreen],#006400
	Madurai=[['Madurai', 'Dindigul', 'Theni'], Color.lightgreen],#90ee90
	Ramanathapuram=[['Ramanathapuram', 'Sivagangai','Virudhunagar'], Color('fffa90')], #fffacd
	Tirunelveli=[['Tirunelveli', 'Thoothukudi', 'Tenkasi'], Color.honeydew],#f0fff0
	"North Arcot":[['Tiruvannamalai', 'Vellore', 'Tirupathur','Ranipet'],Color.indigo],
	"South Arcot":[['Cuddalore','Vilippuram','Kallakurichi'], Color.violet],
	"Chinglepet":[['Chengalpattu','Kanchipuram','Tiruvallur'],Color('aa22aa')],
	"Tiruchirapalli":[['Karur','Tiruchirapalli','Perumbalur','Ariyalur'],Color('ffd711')], #fa8072
	Thanjavur=[['Pudukotai','Thanjavur','Tiruvarur','Nagapattinam','Mayiladithurai'],Color.peachpuff], #ffda89
	Madras=[['Chennai'], Color.lightgoldenrod],
	Nilgiris=[['Nilgiris'],Color('adff2f')],
	Kanyakumari=[['Kanyakumari'],Color.gold],	
	},
	{
		Salem=[['Salem','Namakkal'], Color.mediumspringgreen], 
		Dharmapuri=[['Dharmapuri','Krishnagiri'],Color.mediumspringgreen.darkened(.4)] 
	},
	{	
		Thanjavur=[['Thanjavur','Tiruvarur','Nagapattinam','Mayiladithurai'],Color.peachpuff], #ffda89
		Pudukotai=[['Pudukotai'], Color.peachpuff.darkened(.3)]
	},
	{
		Coimbatore=[['Tiruppur','Coimbatore'], Color.darkgreen],#006400
		Erode=[['Erode'], Color.darkgreen.lightened(.2)]
	},
	{
		Ramanathapuram=[['Ramanathapuram'], Color('fffa90')],
		Sivagangai=[['Sivagangai'], Color('fffa90').lightened(.2)],
		Virudhunagar=[['Virudhunagar'], Color.lightgreen.lightened(.3)], #fffacd
	},
	{
		Madurai=[['Madurai','Theni'], Color.lightgreen],
		Dindigul=[['Dindigul'], Color.lightgreen.lightened(.1)],
	},
	{
		Tirunelveli=[['Tirunelveli','Tenkasi'],Color.honeydew],#f0fff0
		Thoothukudi=[['Thoothukudi'],Color.honeydew.darkened(.2)]#f0fff0
	},
	{
		"North Arcot":[[],Color.transparent],
		Tiruvannamalai=[['Tiruvannamalai','Tirupathur'],Color.indigo],
		Vellore=[['Vellore','Ranipet'],Color.indigo.lightened(.3)]
	},
	{
		Thanjavur=[['Thanjavur'], Color.skyblue], #ffda89 
		Tiruvarur=[['Tiruvarur','Mayiladithurai'], Color.skyblue.darkened(.2)], #ffda89
		Nagapattinam=[['Nagapattinam'], Color.skyblue.darkened(.4)] #ffda89
	},
	{
		"South Arcot":[[],Color.transparent],
		"Cuddalore":[['Cuddalore'], Color.violet],
		"Vilippuram":[['Vilippuram','Kallakurichi'], Color.violet.lightened(.3)],
	},
	{	
		'Tiruchirapalli':[['Tiruchirapalli'], Color('ffd711')],
		"Perumbalur":[['Perumbalur','Ariyalur'], Color('ffd711').darkened(.2)],
		"Karur":[['Karur'], Color('ffd711').darkened(.4)]
	},
	{
		Madurai=[['Madurai'], Color.lightgreen],#90ee90
		Theni=[['Theni'], Color.lightgreen.darkened(.3)]#90ee90
	}, 
	{	
		Salem=[['Salem'], Color.mediumspringgreen],
		"Namakkal":[['Namakkal'], Color.mediumspringgreen.darkened(.3)],
	},
	{	
		"Chinglepet":[[],Color.transparent],
		"Tiruvallur":[['Tiruvallur'],Color('aa22aa')],
		"Kanchipuram":[['Chengalpattu','Kanchipuram'],Color('bb55bb')],
	},  
	{	Dharmapuri=[['Dharmapuri'],Color.mediumspringgreen.darkened(.4)], 
		"Krishnagiri":[['Krishnagiri'],Color.mediumspringgreen.darkened(.7)] 
	},
	{	
		"Perumbalur":[['Perumbalur'],Color('ddd711')],
		"Ariyalur":[['Ariyalur'],Color('ddd711').lightened(.3)]
	},
	{
		Coimbatore=[['Coimbatore'], Color.darkgreen],
		"Tiruppur":[['Tiruppur'], Color.darkgreen.lightened(.5)],
	},
	{
		Tirunelveli=[['Tirunelveli'],Color.honeydew],
		"Tenkasi":[['Tenkasi'],Color.honeydew.darkened(.3)],
	},
	{
		"Vilippuram":[['Vilippuram'], Color.violet.lightened(.3)],
		"Kallakurichi":[['Kallakurichi'], Color.violet.lightened(.8)],
	},
	{
		Tiruvannamalai=[['Tiruvannamalai'],Color.indigo],
		"Tirupathur":[['Tirupathur'],Color.indigo.darkened(.4)],
	},
	{
		Vellore=[['Vellore'],Color.indigo.lightened(.3)],
		"Ranipet":[['Ranipet'],Color.indigo.lightened(.6)],
	},
	{
		"Kanchipuram":[['Kanchipuram'],Color('bb55bb')],
		"Chengalpattu":[['Chengalpattu'],Color('bb55bb').darkened(.4)],		
	},
	{
		Tiruvarur=[['Tiruvarur'],Color.skyblue.darkened(.2)], #ffda89	
		"Mayiladithurai":[['Mayiladithurai'],Color.skyblue.darkened(.6)], #ffda89
	}
	]	

var uiScore 

static func merge_dict(target, patch):
	for key in patch:
		target[key] = patch[key]
#var historylabels=[]
func add_historic_districts(year, data):
	var tmp:Polygon2D
	var nodesadded=0
	for i in data.keys():
		if data[i][0].size() > 0:
			tmp=merge_poly(data[i])
			tmp.hide() #show the polys after animation is done
			tmp.show_behind_parent=true
			tmp.name=i+'history'#year
		if has_node(i+'history'):
			#remove_child(get_node(i+'history'))
			#print('freeing '+i+'history to add next iteration of same district')
			get_node(i+'history').free()
		if tmp!=null:
			add_child(tmp)
			tmp.add_to_group(year)
			nodesadded+=1
			#if has_node('Districts/lbl'+i):
			#	get_node('Districts/lbl'+i).add_to_group('dlabels'+year)
			#else:
			add_label(i, get_node('Districts/'+data[i][0][0]).position, 'dlabels'+ year)
		#else:
		#	print(year," disolved ",i)
	#print(year, 'added polys', nodesadded)

func _unhandled_input(event):
	if event is InputEventKey:
		if event.pressed and event.scancode == KEY_ESCAPE:
			get_tree().quit()
		
func on_district_select(_viewport, event, _idx, district):
	if event is InputEventMouseButton:
		if event.pressed:
			path.clear()
			path.append("Districts/"+district)
		else:
			#on release touch check whats in path and move if required
			decide_action("Districts/"+district)
		#walkpath.clear_points()
		#walkpath.add_point(get_node(district).position)
	#on hover show label
	#if event is InputEventMouseMotion:
	#	$Label.text=district
	#	$Label.rect_position=center(district)
#			#walkpath.add_point(get_node(district).position)
	if event is InputEventScreenDrag:
		if district in path:
			pass
		else:
			path.append("Districts/"+district)
		#walkpath.add_point(get_node(district).position)
#		highlight_district(district, false, true)

func setDistrict_Color_Text(dist, c, showlabel:=true):
	get_node(dist).get_child(0).color=c
	if showlabel:
		$Label.text=dist.split('/')[1]
		$Label.rect_position=center(dist)

func decide_action(district):
	if game_in_progress==1 and attempts < turns:
		if district.split('/')[1] == challenge:
			score+=1
			attempts+=1
			uiScore.text=str(score)+' / '+str(attempts)
			setDistrict_Color_Text(district, selected_color_right)
			timed_msg("[color=#"+selected_color_right.to_html(false)+"]Correct![/color]", 1)#, 2)
			yield($Timer, "timeout")
			if attempts < turns:
				new_challenge()
		else:
			attempts+=1
			uiScore.text=str(score)+' / '+str(attempts)
			get_node(district).get_child(0).color=selected_color_wrong
			$HUD/Message.bbcode_text=challenge+"???\n  [color=#ee2211]Try Again![/color]\nThat was "+district.split('/')[1]
		if attempts==turns:
			if timedquiz:
				$QuizTimer.stop()
				#TODO perf optimize pulse
				#timed_msg('[color=#ffcc99][pulse color=#ffcc33 freq=10]Not bad! \nYou scored '+str(score)+' / '+str(turns)+'\n Taking '+str(seconds)+' seconds[/pulse][/color]',2, 8, Color.orangered)
				timed_msg('[color=#'+Color.orangered.to_html(false) +']Not bad! \nYou scored '+str(score)+' / '+str(turns)+'\n Taking '+str(seconds)+' seconds[/color]',2.5)
			else:
				#timed_msg('[pulse freq=5][color=#ffcc55]Not bad! \nYou scored '+str(score)+' / '+str(turns)+'[/color][/pulse]',2, 8, Color.orangered)
				timed_msg('Not bad! \nYou scored '+str(score)+' / '+str(turns),2.5)
			yield($Timer, "timeout")
			challenges_completed.clear()
			game_over()
	elif game_in_progress==2:
		#history
		pass
	elif game_in_progress==3:
		#quest
		#if !moving:
		gotoDistrict()
	else:
		#get_tree().set_group("dlabels", "visible", false)
		#check if path has anything and move
		#if !moving:
		gotoDistrict()

enum selectionType {
	new, #moving from no selected district to first selected district 
	change, #moving from one selected district to another
	deselection, #selected district is clicked again
	}

#TODO should probable be a property of districts
func selection_state(district):
	if district!=selected_district and selected_district!='':
		return selectionType.change
	else:
		if district==selected_district:
			return selectionType.deselection
	return selectionType.new		
			
#deselect district if one is already selected before selecting new one
#selecting = change color + add border
# returns selection transition type - maybe change, deselection, new
func highlight_district(district, show_neighbours:=true):
	var state=selection_state(district)
	if game_in_progress!=3:
		if state == selectionType.change:
			deselect() #new district has been selected - remove higlight of old one
		else:
			# already selected so deselect
			if state == selectionType.deselection:
				disappear()
				deselect()
				$Label.text=''
				selected_district=''
				update() # redraw borders
				return state
	selected_district=district
	setDistrict_Color_Text(district, selected_color)
	if show_neighbours:
		_on_Grid_show_neighbours(true)
	update() # redraw borders
	return state
			
func deselect():
	for node in $Districts.get_children():
		if node is Label:
			node.visible=false
		if node is Area2D:
			node.get_child(0).color=deselect_color
	
var cache={}
func draw_historic_borders():
	for idx in cache:
		var poly=cache[idx]
		var cnt=poly.size()
		for i in range(1, cnt):
			draw_line(poly[i-1], poly[i], deselect_color.darkened(.05), border_width)
		draw_line(poly[cnt-1], poly[0], deselect_color.darkened(.05), border_width)
		#draw newly merged
	#for dx in dhistory[current_year-1]:
	#	if dhistory[current_year-1][dx][0].size() > 0:
	for  n in get_tree().get_nodes_in_group(years[current_year-1]):
		if n.name.find('history') > 0:
			#var poly=PoolVector2Array(get_node(dx+'history').polygon)
			var poly=PoolVector2Array(n.polygon)
			cache[n.name]=poly
			var cnt=poly.size()
			for i in range(1, cnt):
				draw_line(poly[i-1], poly[i], border_color, border_width)
			draw_line(poly[cnt-1], poly[0], border_color, border_width)

func _draw():
	#debug state borders
#	var p=get_node('debug').polygon
#	for idx in range(1, p.size()):
#		#draw_circle(p[idx], 10, Color.firebrick )
#		draw_string(df, p[idx], str(idx))
	#history
	#print(game_in_progress, clear_borders)
	if game_in_progress==2:
		draw_historic_borders()
		return
	#else:
	#	print('clearing history cache')
	cache.clear()
	#TODO switch to $districts
	for dx in d.keys():
		var poly=PoolVector2Array(get_node('Districts/'+dx+'/Poly').polygon)
		var cnt=poly.size()
		var center_at=get_node("Districts/"+dx).position #Vector2(d[dx][0], d[dx][1])
		if dx != selected_district:
			for i in range(1, cnt):
				draw_line(poly[i-1]+center_at, poly[i]+center_at, border_color, border_width )
			draw_line(poly[cnt-1]+center_at, poly[0]+center_at, border_color, border_width )			
		else:		
			for i in range(1, cnt):
				draw_line(poly[i-1]+center_at, poly[i]+center_at, border_color, border_width )
			draw_line(poly[cnt-1]+center_at, poly[0]+center_at, border_color, border_width )
	
func _on_Quiz_pressed():
	reset()
	game_in_progress=1
	uiScore.text=str(score)
	uiScore.visible=true
	$HUD/TopRight/Labels.hide()
	timed_msg("[pulse color=#22ff44 height=-10 freq=10]You have 10 turns\n Find the Districts![/pulse]",2)
	yield($Timer,"timeout")
	timedquiz=false
	new_challenge()


var challenges_completed:=[]
func new_challenge():
	while true:
		challenge=d.keys()[rng.randi_range(0,len(d)-1)]
		if challenge in challenges_completed:
			continue
		else:
			challenges_completed.append(challenge)
			break
	$HUD/Message.bbcode_text=challenge+" ???"

func game_over():
	deselect()
	path.clear()
	seconds=0
	$HUD/TopRight/Labels.hide()
	$HUD/Top/LabelCities.hide()
	#borders(true)
	#game_in_progress=0
	$HUD/Timeline.bbcode_text=''
	#walkpath.clear_points()
	uiScore.text=''
	uiScore.visible=false
	$HUD/TopRight/Clock.hide()
	$HUD/Message.bbcode_text=''
	$Label.text=''
	#$Gopal.show()
	$HUD/StartScreen.show()
	update() # redraw borders
	#var tree=get_tree()
#	for i in years:
#		var ng=tree.get_nodes_in_group(i)
#		print(i,' ', tree.has_group(i), ' ',ng.size())
#		for j in ng:
#			print(j.name)
#	print('GAME OVER ******',tree.get_node_count())

func timed_msg(msg, period):#, blink:=0, blinkcolor:=Color.green):
	$HUD/Message.bbcode_text=msg
	$Timer.wait_time=period
	$Timer.start()

func reset():
	score=0
	attempts=0
	# gopal state depends on game - explore/quest/multiquest show - history/quiz/timedquiz hide
	$Gopal.hide()
	disableui()
	#$HUD/Grid.hide()
	disappear()
	if selected_district!='':
		deselect()
		$Label.text=''
		get_tree().set_group("dlabels","visible",false)
#var moving:=false
func gotoDistrict():
	disableui()
	#moving=true
	var current
	var distance
	var time
	$Gopal/CollisionShape2D.disabled = true
	$Gopal.initiated_by_code=true
	while path.size() > 0 :
		current=path.pop_front()
		var st=highlight_district(current,false)
		var gpos=get_node(current).position#+Vector2(d[current][2]/2, d[current][3]/2 )
		distance=$Gopal.position.distance_to(gpos)
		var direction=$Gopal.position.direction_to(gpos)
		$Gopal.velocity=direction
		time=distance/$Gopal.speed
		tw.interpolate_property($Gopal,"position",$Gopal.position,gpos,time)
		tw.start()
		var x=yield(tw, 'tween_completed')
		#moving=false 
		#TODO test what happens when clicking around while Gopal is moving to target
		if st != selectionType.deselection:
			showinfo(current, st)
	$Gopal.velocity=Vector2(0,0)
	$Gopal.initiated_by_code=false
	$Gopal/CollisionShape2D.disabled = false
	#if game_in_progress !=3:
	#	enableui()
		
func fullwalktest():
	reset()
	game_in_progress=3
	var current='Chennai'
	var visited=[current]
	$Camera2D/Gopal/CollisionShape2D.disabled = true
	$Camera2D/Gopal.position=Vector2(0,0)
	#$Camera2D/Gopal/AnimatedSprite.animation = "walk"
	#$Camera2D/Gopal/AnimatedSprite.play()
	while len(visited) < len(d):
		var i:Area2D=get_node(current)
		var gpos=i.position
		#walkpath.add_point(gpos)
		$Camera2D/Tween.interpolate_property($Camera2D,"position",$Camera2D.position,gpos,1.4)
		$Camera2D/Tween.start()
		# not required gopal will highlight
		setDistrict_Color_Text(current, selected_color)
		var neighbours=i.get_overlapping_areas()
		for n in neighbours:
			if n.name == 'Gopal':
				continue
			if n.name in visited:
				continue
			else:
				current=n.name
				visited.append(n.name)
				break
		timed_msg('Districts visited\n'+str(len(visited))+' out of '+str(len(d)),1 )
		#yield($Timer, "timeout")
		if(i.name == current):
			current=visited[-2]
		if(i.name == current):
			var jump
			while true:
				jump=d.keys()[rng.randi_range(0,len(d)-1)]
				if visited.has(jump) == false:
					current=jump
					break
			visited.append(jump)
	$Camera2D/Gopal/CollisionShape2D.disabled = false
	#$Camera2D/Gopal/AnimatedSprite.stop()
	game_over()

var df
var labelstyle=preload("res://labelstyle.tres")
var labelfont=load("res://DroidSans.ttf")
func init_label_font():
	df=DynamicFont.new()
	df.font_data=labelfont
	df.size=36
	
# used in history mode to label old districts each step
# why not use draw string - cause group show hide is more convenient polys and labels stay linked
#var lcnt=0
#var cs2d=CircleShape2D.new()
func add_label(district, pos, groupname):
#	var r
#	if lcnt %2 == 0:
#		r=RigidBody2D.new()		
#		r.constant_linear_velocity=Vector2(0.0, -3.0)
#		r.collision_mask=2
#		r.collision_layer=2
#	else:
#		r=RigidBody2D.new()
#		r.collision_layer=2
#		r.collision_mask=2
#	lcnt=lcnt+1
	var l:Label=Label.new()
	df.size=22
	l.set("custom_fonts/font",df)
	l.set("custom_colors/font_color", Color( 1, 0.93, 0.094, 1 ))#district_label_text_color)
	l.set("custom_styles/normal", labelstyle)
	#l.set("custom_colors/font_color_shadow", Color.black)
	#l.set("custom_constants/shadow_offset_x",3)
	#l.set("custom_constants/shadow_offset_y",3)
	#l.set("custom_constants/shadow_as_outline",0)
	l.visible=false
	l.text=district
	#l.name='lbl'+district
	l.rect_position=pos
	#l.rect_scale=Vector2(1/scale.x, 1/scale.y)
	l.add_to_group(groupname)
	#r.position=pos
	#r.add_child(l)
	#var c = CollisionShape2D.new()
	#cs2d.radius=59
	#c.shape=cs2d
	#r.add_child(c)
	add_child(l)
	#print('label added ', 'lbl'+district, ' to group ', groupname )

func _on_Labels_toggled(button_pressed):
	if button_pressed:
		get_tree().set_group("dlabels","visible",true)
		#$HUD/TopRight/Labels["custom_styles/normal"].bg_color = Color("#bada55")
		$HUD/TopRight/Labels["modulate"]=district_label_text_color
	else:
		get_tree().set_group("dlabels","visible",false)
		$HUD/TopRight/Labels["modulate"]=Color(1.0, 1.0, 1.0)

func _on_TN_ready():
	#$HUD/HistoryControl.rect_scale=Vector2(1/scale.x, 1/scale.y)
	uiScore=get_node("HUD/Top/R1/Score")
	get_tree().call_group("allcities","hide")
	#debug prints cities per district
	#for dt in d.keys():
	#	print( dt, len(get_tree().get_nodes_in_group(dt)))

func disableui():
	$HUD/StartScreen.hide()
	#$HUD/TopRight/Labels.hide()

func enableui():
	$HUD/StartScreen.show()
	#$HUD/TopRight/Labels.hide()
	

func neighbours(districtname):
	var l=get_node(districtname).get_overlapping_areas()
	var n=[]
	for i in l:
		if i.name !='Gopal':
			n.append(i.name)
	return n

var years=["1956","1965","1974","1979","1985",
"1985x2","1986","1989","1991",
"1993","1995","1996","1997","1997x2",
"2004","2007","2007x2",
"2019","2019x2","2019x3","2019x4","2019x5",
"2020"]
var current_year=0

func name(n):
	#print(n.name)
	if n == 'North Arcot' or n=='North Arcothistory':  
		return 'Tiruvannamalai'
	elif n == 'South Arcot' or n=='South Arcothistory':
		return 'Cuddalore'
	elif n == 'Chinglepet' or n=='Chinglepethistory':
		return 'Kanchipuram' 
	elif n == 'Trichy':
		return 'Tiruchirapalli' 
	elif n == 'Madrashistory':
		return 'Chennai' 
	else:
		return n.replace('history','')

var clear_borders:=false

func add_to_dist_timeline(names):
	if names.size()==2:
		$HUD/Timeline.append_bbcode(' '+names[0]+', '+names[1])
		return
	if names.size()==3:
		$HUD/Timeline.append_bbcode(' '+names[0]+', '+names[1]+'\n        '+names[2])
		return
	$HUD/Timeline.append_bbcode(' '+names[0]+', '+names[1]+'\n')
	for s in range(2, names.size(),2):
		if s+1 < names.size():
			$HUD/Timeline.append_bbcode('         '+names[s]+', '+names[s+1]+'\n')
		else:	
			$HUD/Timeline.append_bbcode('         '+names[s])

func center(district):
	#return get_node(district).position+Vector2(d[district][2]/2, d[district][3]/2)
	return get_node(district).position + Vector2(50, 50)

var history_stopped_pressed:=false
var history_pause_pressed:=false	
func _on_History_pressed():
	reset()
	#existing borders should be removed so map starts in black slate
	history_stopped_pressed=false
	history_pause_pressed=false
	game_in_progress=2
	#clear all existing borders
	border_color=deselect_color
	border_width=4
	update()

	# generate historic districts and labels and add to group. group name is year string
	add_historic_districts(years[current_year], dhistory[0])
	
	#setup ui
	uiScore.visible=true
	uiScore.text=years[current_year].substr(0,4)
	$HUD/Timeline.bbcode_text='[color=yellow]'+years[current_year]+'[/color]'
	
	#setup data for transition animation
	# using karur as proxy center of the state from where the initial 12 districts appear
	var old=[{node=get_node('Districts/Karur'),loc=center('Districts/Karur')}] #d['Karur']}]
	var newlist=[]
	#for timeline
	var names=[] 
	for n in get_tree().get_nodes_in_group(years[current_year]):
		#if n is Polygon2D:
		names.append(n.name.replace('history',''))
		newlist.append({node=n, loc=center( 'Districts/' + name(n.name) )}) 
	$HistoryAnimator.start(old, newlist)
	# HistoryControl ie stop button is shown only after animation starts
	$HUD/Top/HistoryControl.show()
	yield($HistoryAnimator, "move_complete")
	#print('init move complete')
	add_to_dist_timeline(names)
	get_tree().call_group(years[current_year],"show")
	get_tree().call_group('dlabels'+years[current_year],"show")
	border_color=$HistoryAnimator.bcolor #Color(0, 0.4, 0.5, 1.0)
	border_width=4
	current_year=current_year+1
	# borders have been updated redraw
	update() 
	# wait for a bit before next step
	yield(get_tree().create_timer(1.0), "timeout")
	
	while history_stopped_pressed==false and history_pause_pressed==false:
		if current_year>=len(years):
			quit_history_mode()
			break
		history_next_animate()
		yield($HistoryAnimator, "move_complete")
		get_tree().call_group(years[current_year],"show")
		get_tree().call_group('dlabels'+years[current_year],"show")
		current_year=current_year+1
		#borders will be drawn for current year -1
		update() # TODO very delicate since its tied to current_year-1		
		yield(get_tree().create_timer(1.0), "timeout") 


func history_next_animate():
	#get_tree().set_group(years[current_year-1],"modulate",Color(0.0,0.0,0.0))
	#get_tree().call_group(years[current_year-1],"hide")
	get_tree().call_group("dlabels"+years[current_year-1],"hide")
	add_historic_districts(years[current_year], dhistory[current_year])
	#borders(false)
#	$HUD/Message.text=$HUD/Message.text+'\n'+years[current_year]
	uiScore.text=years[current_year].substr(0,4)
	$HUD/Timeline.append_bbcode('\n[color=yellow]'+years[current_year]+'[/color]')
	var names=[]
	var newlist=[]
	var key=dhistory[current_year].keys()[0]	
	var old=[{node=get_node(key+'history'), loc=center('Districts/'+name(key))}]
	for n in get_tree().get_nodes_in_group(years[current_year]):
		#if n is Polygon2D:
		names.append(n.name.replace('history',''))
		newlist.append({node=n, loc=center('Districts/'+ name(n.name))})
	$HistoryAnimator.start(old, newlist)
	add_to_dist_timeline(names)

func history_next():
	#get_tree().set_group(years[current_year-1],"modulate",Color(0.0,0.0,0.0))
	#dont hide polys
	#get_tree().call_group(years[current_year-1],"hide")
	get_tree().call_group("dlabels"+years[current_year-1],"hide")
	add_historic_districts(years[current_year], dhistory[current_year])
	#borders(false)
#	$HUD/Message.text=$HUD/Message.text+'\n'+years[current_year]
	uiScore.text=years[current_year].substr(0,4)
	$HUD/Timeline.append_bbcode('\n[color=yellow]'+years[current_year]+'[/color]')
	var names=[]
	for n in get_tree().get_nodes_in_group(years[current_year]):
		if n is Polygon2D:
			names.append(n.name.replace('history',''))
	add_to_dist_timeline(names)

var histcache:={}
func get_history(dd):
	var cur_year=0
	var text:=''
	if dd in histcache:
		return histcache[dd]
	while true:
		if cur_year>=len(years):
			histcache[dd]=text
			return text
		if dd in dhistory[cur_year]:
			if cur_year==0:
				text='Created in ' + years[cur_year] +'\n'
			else:
				text=text+'Divided in '+ years[cur_year] + ' with '  
				var tmp=dhistory[cur_year].keys().duplicate()
				tmp.erase(dd)
				text=text +' '+ str(tmp).replace('[','').replace(']','') +'\n'	
		cur_year=cur_year+1
		
var seconds:=0
var timedquiz:=false
func _on_QuizTimer_timeout():
	seconds=seconds+1
	$HUD/TopRight/Clock.text=str(seconds)

func showstack():
	for i in get_stack():
		print(i.function, i.line)

func appear():	
	#print("==>>")
	#showstack()
	tw.interpolate_property($HUD/Grid, "rect_position:x", -$HUD/Grid.rect_size.x, 0,.3)
	tw.start()

func disappear():
	#var tmpx=$HUD/Grid.rect_size.x
	#print("<<==")
	#showstack()
	tw.interpolate_property($HUD/Grid, "rect_position:x", 0,-$HUD/Grid.rect_size.x,.3)
	tw.start()
	yield(tw,"tween_completed")
	#$HUD/Grid.hide()
	#$HUD/Grid.rect_position.x=0


func _on_Quest_pressed():
	disableui()
	$Gopal.show()
	$HUD/TopRight/Labels.show()
	#$HUD/TopRight/LabelCities.show()
	if selected_district!='':
		deselect()
		$Label.text=''
		get_tree().set_group("dlabels","visible",false)
	quest_selected('')

var quest_colors={
	sea=Color.skyblue,
	river=Color.darkcyan,
	mountains=Color.sienna,
	food=Color.plum,
	people=Color.seagreen,
	culture=Color.gold,
	movies=Color.indigo
}	
var general_quests=['', 'mountains', 'river', 'sea']

func quest_selected(districts, quest_name=''):
	# district is empty string - quest button pressed 
	#if array quest selected via multiquest
	if districts is Array:
		for i in districts:
			setDistrict_Color_Text("Districts/"+i, quest_colors[quest_name], false)
		yield(get_tree().create_timer(4.0), "timeout")
		$HUD/QMenu/PopupPanel.hide()
		$HUD/QMenu.hide()
	$HUD/Grid/MarginContainer/Neighbours.visible=false
	$HUD/Grid/MarginContainer/history.visible=false
	$HUD/Grid/MarginContainer/Back.visible=false
	$HUD/Grid/MarginContainer/Muni.hide()
	uiScore.visible=true
	uiScore.text='Check the InfoBox for Instructions'
	game_in_progress=3
	if general_quests.has(quest_name):
		appear()
		$HUD/Grid.reload(districts, '', '', 0)
	else:
		appear()
		$HUD/Grid.reload(districts, '', '', 0,quest_name[0])
		
func _on_Timed_pressed():
	reset()
	game_in_progress=1
	uiScore.text=str(score)
	uiScore.visible=true
	$HUD/TopRight/Clock.show()
	timed_msg("[pulse color=#44dd22 height=-15 freq=5]You have 10 turns\n Find the Districts![/pulse]",2)
	yield($Timer,"timeout")
	new_challenge()
	timedquiz=true
	$QuizTimer.start()

#when player node moves into area 
func showinfo(district, transition):
	if transition == selectionType.new:
		appear()
	if game_in_progress==3:
		uiScore.visible=false
		#appear()
		$HUD/Grid.reload(district, '', '', 1)
	else:
		# non quest just show info without clue
		uiScore.visible=false
		#appear()
		$HUD/Grid.reload(district, neighbours(district), get_history(district.split('/')[1]), 2) 

func _on_quest_over(turnstaken, cluessolved, success):
	print('quest success',success)
	$HUD/Grid/MarginContainer/Neighbours.visible=true
	$HUD/Grid/MarginContainer/history.visible=true
	$HUD/Grid/MarginContainer/Back.visible=true
	$HUD/Grid/MarginContainer/Muni.show()	
	$HUD/Grid.hide()
	disappear()
	uiScore.visible=false
	if success:
		timed_msg("[pulse color=#22dd44 height=-15 freq=7]Congrats! Quest Complete. You took "+str(turnstaken)+" turns\nAnd solved "+str(cluessolved)+" clues! Next Quest has been Unlocked.[/pulse]",3)
	else:
		timed_msg("[pulse color=#22dd44 height=-15 freq=5]You took "+str(turnstaken)+" turns\nAnd solved "+str(cluessolved)+" clues![/pulse]",3)
	yield($Timer,"timeout")
	$HUD/Message.bbcode_text=''
	#if multiquest:
	#	multiquest=false
	#quest_in_progress=false
	game_in_progress=0 # revert back to explore mode
	#reset score border
	uiScore["custom_styles/normal"].border_color="feed5f"#selected_color_right
	uiScore["custom_colors/font_color"]="feed5f"#selected_color_right
	#enableui()
	game_over()

func _off_track(dx):
	uiScore.visible=true
	uiScore.text="Press CLUE if you need more hints"
	uiScore["custom_styles/normal"].border_color=Color.red
	uiScore["custom_colors/font_color"]=Color.red
	get_node("Districts/"+dx+'/Poly').color=selected_color_wrong

func _on_Grid_show_neighbours(show):
	if show:
		if selected_district == "" or selected_district==null:
			return
		for i in neighbours(selected_district):
			get_node('Districts/lbl'+i).visible=true
			get_node('Districts/'+i).get_child(0).color=deselect_color.blend("79e9a5")
	else:
		for district in d.keys():
			get_node('Districts/lbl'+district).visible=false
			if selected_district == "" or selected_district==null:
				get_node('Districts/'+district).get_child(0).color=deselect_color
			else:
				if district != selected_district.split('/')[1]:
					get_node('Districts/'+district).get_child(0).color=deselect_color	
	#update()

func _on_Grid_on_track(d):
	#$HUD/Score.text="Well done!\nYou are on track"
	#$HUD/Score["custom_styles/normal"].border_color=selected_color_right
	#$HUD/Score["custom_colors/font_color"]=selected_color_right
	get_node("Districts/"+d).get_child(0).color=selected_color_right

#var multiquest=false
func subjectQuest():
	disableui()
	$Gopal.show()
	$HUD/TopRight/Labels.show()
	if selected_district!='':
		deselect()
		$Label.text=''
		get_tree().set_group("dlabels","visible",false)
	$HUD/QMenu.show()

func _on_Explore_pressed():
	$Gopal.show()
	$HUD/TopRight/Labels.show()
	$HUD/Top/LabelCities.show()
	var randstartidx=rng.randi_range(0,d.size()-1)
	var startat = d.keys()[randstartidx]
	path.append("Districts/"+startat)
	gotoDistrict()

func _on_infobox_exit():
	for k in $HUD/Grid/VBoxContainer/PanelContainer.get_children():
		if k is Polygon2D:
			k.visible=false #TODO this doesnt really redraw empty poly
		elif k is TextureRect:
			k.texture=null	
		else:
			k.free()
	game_over()


func _on_LabelCities_item_selected(index):
	if index!=0:
		get_tree().call_group("allcities","hide")
		get_tree().call_group(citygrades[index],"show")
	else:
		get_tree().call_group("allcities","hide")
	#$Munis._on_InfoBox_muni_pressed('all', citygrades[index])

func _on_HistoryStop_pressed():
	history_stopped_pressed=true
	quit_history_mode()
	
func quit_history_mode():
	game_in_progress=0 #stops the draw
	#cache.clear()
	$HistoryAnimator.stop()
	for i in range(0,len(years)):
		get_tree().call_group(years[i],"hide")
		get_tree().call_group("dlabels"+years[i],"hide")
		#get_tree().call_group(years[i],"queue_free")
		for tmpx in get_tree().get_nodes_in_group(years[i]):
			#if tmpx is Polygon2D:
			tmpx.queue_free()
		for tmpx in get_tree().get_nodes_in_group("dlabels"+years[i]):
			#if tmpx is Polygon2D:
			tmpx.queue_free()
			#else:
			#	print('not freeing', tmpx.name)	
	#print('after queue free ***********', get_tree().get_node_count())
	current_year=0
	uiScore.visible=false
	$HUD/Top/HistoryControl.hide()
	#get_tree().call_group('1956',"hide")
	#borders(true)	
	border_color=deselect_color.darkened(.1)
	update()
	$HUD/Top/R1/Next.hide()
	$HUD/Top/R1/Previous.hide()
	game_over()

func _on_PlayPause_toggled(button_pressed):
	history_pause_pressed=button_pressed
	if button_pressed:
		$HUD/Top/HistoryControl/PlayPause.text="Play"
		$HUD/Top/R1/Next.show()
		$HUD/Top/R1/Previous.show()
	else:
		$HUD/Top/HistoryControl/PlayPause.text="Pause"
		$HUD/Top/R1/Next.hide()
		$HUD/Top/R1/Previous.hide()

func _on_Next_pressed():
	if current_year>=len(years):
		quit_history_mode()
		return
	history_next()
	get_tree().call_group(years[current_year],"show")
	get_tree().call_group("dlabels"+years[current_year],"show")
	current_year=current_year+1
	update()

const MAX_COORD = pow(2,31)-1
const MIN_COORD = -MAX_COORD
var polybounds

func minv(curvec,newvec):
	return Vector2(min(curvec.x,newvec.x),min(curvec.y,newvec.y))
func maxv(curvec,newvec):
	return Vector2(max(curvec.x,newvec.x),max(curvec.y,newvec.y))

func get_bounds(polygon):
	var min_vec = Vector2(MAX_COORD,MAX_COORD)
	var max_vec = Vector2(MIN_COORD,MIN_COORD)
	for v in polygon:
		min_vec = minv(min_vec,v)
		max_vec = maxv(max_vec,v)
	return Rect2(min_vec, max_vec-min_vec)

var pt=preload("res://Point.tscn")
func _on_Grid_show_munis(district):
	#TODO dont redraw if pressed again and again
	$HUD/Grid/VBoxContainer/PanelContainer/imgbox.texture=null
	var p = get_node('Districts/'+district+'/Poly').polygon
	var origin=get_node('Districts/'+district).position
	#print('origin ', origin)
	#print(p)
	#$HUD/Grid/VBoxContainer/PanelContainer/Map	
	var pb=get_bounds(p)
	#print('bounds of p ',pb.size.x, pb.size.y)
	var ib=$HUD/Grid/VBoxContainer/PanelContainer.rect_size
	#print('infobox rect ',ib.x, ib.y)
	$HUD/Grid/VBoxContainer/PanelContainer/Map.scale=Vector2(ib.x/pb.size.x, ib.y/pb.size.y)
	$HUD/Grid/VBoxContainer/PanelContainer/Map.visible=true
	$HUD/Grid/VBoxContainer/PanelContainer/Map.polygon=p
	$HUD/Grid/VBoxContainer/PanelContainer/Map.color=deselect_color
	for c in get_tree().get_nodes_in_group(district):
		#print(c, ' ', c.name,' ', c.position)
		#print(c.position-origin)
		var city=pt.instance()
		city.name=c.name
		city.radius=20/citygrades.find(c.group)
		var citypos= c.position - origin
		city.position = Vector2(citypos.x*ib.x/pb.size.x, citypos.y * ib.y/pb.size.y)
		city.z_index=3
		$HUD/Grid/VBoxContainer/PanelContainer.add_child(city)
